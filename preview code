{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tx-3VRu2p6NJ"
      },
      "source": [
        "Problem Statement :  To build a classification methodology to predict the type of Thyroid a person has ,based on the below features.\n",
        "\n",
        "age - Age of the person\n",
        "\n",
        "sex - Male or Female\n",
        "\n",
        "on_thyroxine - true or false\n",
        "\n",
        "on_antithyroid_medication - true or false\n",
        "\n",
        "sick - true or false\n",
        "\n",
        "pregnant - true or false\n",
        "\n",
        "thyroid_surgery - true or false\n",
        "\n",
        "I131_treatment - true or false\n",
        "\n",
        "query_hypothyroid - true or false\n",
        "\n",
        "query_hyperthyroid -true or false\n",
        "\n",
        "lithium - true or false\n",
        "\n",
        "goitre - true or false\n",
        "\n",
        "tumor - true or false\n",
        "\n",
        "hypopituitary- true or false\n",
        "\n",
        "psych - true or false\n",
        "\n",
        "TSH_measured - true or false\n",
        "\n",
        "TSH - thyroid stimulating hormone floating value\n",
        "\n",
        "T3_measured - true or false\n",
        "\n",
        "T3 - triiodothyronine value\n",
        "\n",
        "TT4_measured- true or false\n",
        "\n",
        "TT4 - Thyroxine value\n",
        "\n",
        "T4U_measured- true or false\n",
        "\n",
        "T4U - numerical value\n",
        "\n",
        "FTI_measured- true or false\n",
        "\n",
        "FTI -Free Thyroxine Index\n",
        "\n",
        "TBG_measured- true or false\n",
        "\n",
        "TBG -Thyroid-Binding Globulin  value\n",
        "\n",
        "referral_source - different sources of referals\n",
        "\n",
        "Class - different types of thyroid"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Sl93Cq0fcDM",
        "outputId": "06090e78-fbd7-49be-c041-f39c53f74ff3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: kneed in /usr/local/lib/python3.10/dist-packages (0.8.5)\n",
            "Requirement already satisfied: numpy>=1.14.2 in /usr/local/lib/python3.10/dist-packages (from kneed) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from kneed) (1.11.4)\n"
          ]
        }
      ],
      "source": [
        "!pip install kneed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LCjoi4gr4SOx",
        "outputId": "a97d4853-933e-43b5-e736-6408fef32823"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (0.10.1)\n",
            "Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (1.11.4)\n",
            "Requirement already satisfied: scikit-learn>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (1.2.2)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (1.3.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from imbalanced-learn) (3.3.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install imbalanced-learn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KRmpjkUVbRNl"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import os\n",
        "import datetime\n",
        "import pickle\n",
        "import six\n",
        "import sys\n",
        "sys.modules['sklearn.externals.six'] = six\n",
        "\n",
        "import sklearn.neighbors._base\n",
        "sys.modules['sklearn.neighbors.base'] = sklearn.neighbors._base\n",
        "\n",
        "from sklearn.utils import resample\n",
        "from imblearn.over_sampling import SMOTENC,RandomOverSampler\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "import imblearn.over_sampling\n",
        "#from imblearn.over_sampling import KMeansSMOTE\n",
        "import sklearn.impute\n",
        "#from sklearn.impute import KNNImputer\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.cluster import KMeans\n",
        "from kneed import KneeLocator\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "sns.set()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "V15LfsCicbFN",
        "outputId": "4841eeb8-1675-4ee2-ff2e-af1b4d076e35"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-9f1eb5d8-87b1-443b-b7d5-1ef655dcf1e8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>TT4_measured</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U_measured</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI_measured</th>\n",
              "      <th>FTI</th>\n",
              "      <th>TBG_measured</th>\n",
              "      <th>TBG</th>\n",
              "      <th>referral_source</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>125</td>\n",
              "      <td>t</td>\n",
              "      <td>1.14</td>\n",
              "      <td>t</td>\n",
              "      <td>109</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>SVHC</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>102</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46</td>\n",
              "      <td>M</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>109</td>\n",
              "      <td>t</td>\n",
              "      <td>0.91</td>\n",
              "      <td>t</td>\n",
              "      <td>120</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>70</td>\n",
              "      <td>F</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>175</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>61</td>\n",
              "      <td>t</td>\n",
              "      <td>0.87</td>\n",
              "      <td>t</td>\n",
              "      <td>70</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>SVI</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 30 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9f1eb5d8-87b1-443b-b7d5-1ef655dcf1e8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9f1eb5d8-87b1-443b-b7d5-1ef655dcf1e8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9f1eb5d8-87b1-443b-b7d5-1ef655dcf1e8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ed4f59dc-663f-4c0f-b35c-be3f503a8bba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed4f59dc-663f-4c0f-b35c-be3f503a8bba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ed4f59dc-663f-4c0f-b35c-be3f503a8bba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  age sex on_thyroxine query_on_thyroxine on_antithyroid_medication sick  \\\n",
              "0  41   F            f                  f                         f    f   \n",
              "1  23   F            f                  f                         f    f   \n",
              "2  46   M            f                  f                         f    f   \n",
              "3  70   F            t                  f                         f    f   \n",
              "4  70   F            f                  f                         f    f   \n",
              "\n",
              "  pregnant thyroid_surgery I131_treatment query_hypothyroid  ... TT4_measured  \\\n",
              "0        f               f              f                 f  ...            t   \n",
              "1        f               f              f                 f  ...            t   \n",
              "2        f               f              f                 f  ...            t   \n",
              "3        f               f              f                 f  ...            t   \n",
              "4        f               f              f                 f  ...            t   \n",
              "\n",
              "   TT4 T4U_measured   T4U FTI_measured  FTI TBG_measured TBG referral_source  \\\n",
              "0  125            t  1.14            t  109            f   ?            SVHC   \n",
              "1  102            f     ?            f    ?            f   ?           other   \n",
              "2  109            t  0.91            t  120            f   ?           other   \n",
              "3  175            f     ?            f    ?            f   ?           other   \n",
              "4   61            t  0.87            t   70            f   ?             SVI   \n",
              "\n",
              "      Class  \n",
              "0  negative  \n",
              "1  negative  \n",
              "2  negative  \n",
              "3  negative  \n",
              "4  negative  \n",
              "\n",
              "[5 rows x 30 columns]"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#loading data set\n",
        "\n",
        "df = pd.read_csv(\"hypothyroid.csv\")\n",
        "df.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uqS8P4gVoHbr",
        "outputId": "ebada39d-bd02-43c6-cf78-95905f89be91"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['age', 'sex', 'on_thyroxine', 'query_on_thyroxine',\n",
              "       'on_antithyroid_medication', 'sick', 'pregnant', 'thyroid_surgery',\n",
              "       'I131_treatment', 'query_hypothyroid', 'query_hyperthyroid', 'lithium',\n",
              "       'goitre', 'tumor', 'hypopituitary', 'psych', 'TSH_measured', 'TSH',\n",
              "       'T3_measured', 'T3', 'TT4_measured', 'TT4', 'T4U_measured', 'T4U',\n",
              "       'FTI_measured', 'FTI', 'TBG_measured', 'TBG', 'referral_source',\n",
              "       'Class'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "15nlRkCsoeNN",
        "outputId": "096eef91-6b0a-45a6-d3ea-ab1c6efcc57f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3772 entries, 0 to 3771\n",
            "Data columns (total 30 columns):\n",
            " #   Column                     Non-Null Count  Dtype \n",
            "---  ------                     --------------  ----- \n",
            " 0   age                        3772 non-null   object\n",
            " 1   sex                        3772 non-null   object\n",
            " 2   on_thyroxine               3772 non-null   object\n",
            " 3   query_on_thyroxine         3772 non-null   object\n",
            " 4   on_antithyroid_medication  3772 non-null   object\n",
            " 5   sick                       3772 non-null   object\n",
            " 6   pregnant                   3772 non-null   object\n",
            " 7   thyroid_surgery            3772 non-null   object\n",
            " 8   I131_treatment             3772 non-null   object\n",
            " 9   query_hypothyroid          3772 non-null   object\n",
            " 10  query_hyperthyroid         3772 non-null   object\n",
            " 11  lithium                    3772 non-null   object\n",
            " 12  goitre                     3772 non-null   object\n",
            " 13  tumor                      3772 non-null   object\n",
            " 14  hypopituitary              3772 non-null   object\n",
            " 15  psych                      3772 non-null   object\n",
            " 16  TSH_measured               3772 non-null   object\n",
            " 17  TSH                        3772 non-null   object\n",
            " 18  T3_measured                3772 non-null   object\n",
            " 19  T3                         3772 non-null   object\n",
            " 20  TT4_measured               3772 non-null   object\n",
            " 21  TT4                        3772 non-null   object\n",
            " 22  T4U_measured               3772 non-null   object\n",
            " 23  T4U                        3772 non-null   object\n",
            " 24  FTI_measured               3772 non-null   object\n",
            " 25  FTI                        3772 non-null   object\n",
            " 26  TBG_measured               3772 non-null   object\n",
            " 27  TBG                        3772 non-null   object\n",
            " 28  referral_source            3772 non-null   object\n",
            " 29  Class                      3772 non-null   object\n",
            "dtypes: object(30)\n",
            "memory usage: 884.2+ KB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "imPraca6oiIm",
        "outputId": "0abc7ed3-772a-476b-c86a-9f3036b1305e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(3772, 30)"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gv80bBu3oxL1",
        "outputId": "ff27205e-9498-4724-a984-0b8df3ae3a3e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['negative', 'compensated_hypothyroid', 'primary_hypothyroid',\n",
              "       'secondary_hypothyroid'], dtype=object)"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[\"Class\"].unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qMY8dwkRx-UG"
      },
      "source": [
        "Ouptut class also has 4 distinct categories."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "QGzs8c9xo-_w",
        "outputId": "77c9f742-fc28-4080-e89a-bf905ebc0efe"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-ba82f706-60a4-494b-9d12-85b4c708ba53\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>TT4_measured</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U_measured</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI_measured</th>\n",
              "      <th>FTI</th>\n",
              "      <th>TBG_measured</th>\n",
              "      <th>TBG</th>\n",
              "      <th>referral_source</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>...</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>94</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>242</td>\n",
              "      <td>2</td>\n",
              "      <td>147</td>\n",
              "      <td>2</td>\n",
              "      <td>235</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>59</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>?</td>\n",
              "      <td>t</td>\n",
              "      <td>?</td>\n",
              "      <td>t</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>95</td>\n",
              "      <td>2480</td>\n",
              "      <td>3308</td>\n",
              "      <td>3722</td>\n",
              "      <td>3729</td>\n",
              "      <td>3625</td>\n",
              "      <td>3719</td>\n",
              "      <td>3719</td>\n",
              "      <td>3713</td>\n",
              "      <td>3538</td>\n",
              "      <td>...</td>\n",
              "      <td>3541</td>\n",
              "      <td>231</td>\n",
              "      <td>3385</td>\n",
              "      <td>387</td>\n",
              "      <td>3387</td>\n",
              "      <td>385</td>\n",
              "      <td>3772</td>\n",
              "      <td>3772</td>\n",
              "      <td>2201</td>\n",
              "      <td>3481</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4 rows × 30 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba82f706-60a4-494b-9d12-85b4c708ba53')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ba82f706-60a4-494b-9d12-85b4c708ba53 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ba82f706-60a4-494b-9d12-85b4c708ba53');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8b5846bb-c69a-4d15-bd8f-ab02d40e9d3f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b5846bb-c69a-4d15-bd8f-ab02d40e9d3f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8b5846bb-c69a-4d15-bd8f-ab02d40e9d3f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "         age   sex on_thyroxine query_on_thyroxine on_antithyroid_medication  \\\n",
              "count   3772  3772         3772               3772                      3772   \n",
              "unique    94     3            2                  2                         2   \n",
              "top       59     F            f                  f                         f   \n",
              "freq      95  2480         3308               3722                      3729   \n",
              "\n",
              "        sick pregnant thyroid_surgery I131_treatment query_hypothyroid  ...  \\\n",
              "count   3772     3772            3772           3772              3772  ...   \n",
              "unique     2        2               2              2                 2  ...   \n",
              "top        f        f               f              f                 f  ...   \n",
              "freq    3625     3719            3719           3713              3538  ...   \n",
              "\n",
              "       TT4_measured   TT4 T4U_measured   T4U FTI_measured   FTI TBG_measured  \\\n",
              "count          3772  3772         3772  3772         3772  3772         3772   \n",
              "unique            2   242            2   147            2   235            1   \n",
              "top               t     ?            t     ?            t     ?            f   \n",
              "freq           3541   231         3385   387         3387   385         3772   \n",
              "\n",
              "         TBG referral_source     Class  \n",
              "count   3772            3772      3772  \n",
              "unique     1               5         4  \n",
              "top        ?           other  negative  \n",
              "freq    3772            2201      3481  \n",
              "\n",
              "[4 rows x 30 columns]"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O_DGOInjqcpb"
      },
      "source": [
        "We can see from the data description that there are no missing values. But if we check the dataset the missing values are replaced with invalid values like '?'. Let's replace such values with 'nan' and check for missing values again."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b8REczunqLy4",
        "outputId": "7c470a4d-f74b-49fb-b765-e36e4e8edc25"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "age 1\n",
            "sex 150\n",
            "TSH 369\n",
            "T3 769\n",
            "TT4 231\n",
            "T4U 387\n",
            "FTI 385\n",
            "TBG 3772\n"
          ]
        }
      ],
      "source": [
        "#checking number of invalid value like '?' present in each column\n",
        "\n",
        "for column in df.columns:\n",
        "    count = df[column][df[column]=='?'].count()\n",
        "    if count!=0:\n",
        "        print(column, count)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dgBg5x-Brhbt"
      },
      "source": [
        "So these are the columns which have missing values but missing values are replaced with '?'. We will replace these values with 'nan' and then do imputation of these missing values.\n",
        "\n",
        "Also, we can see that for column 'TBG' all the values are missing. So we will drop this column as it is of no use to us."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YR7laLUDrDX6"
      },
      "outputs": [],
      "source": [
        "df = df.drop(['TBG'],axis =1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pxWnp9hGsFLt"
      },
      "source": [
        "Also, looking to the dataset, we can see that some columns are with true and false value are just the indication that whether the next column has values or not. Let's see an example:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "AzNFyyvYsGY1",
        "outputId": "64a585eb-66fc-469c-caa6-eec3111b738b"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"df[['T4U_measured','T4U']]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"T4U_measured\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"f\",\n          \"t\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T4U\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"?\",\n          \"0.87\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-4bb6b3ab-348b-403b-b99d-73bec246c093\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>T4U_measured</th>\n",
              "      <th>T4U</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>t</td>\n",
              "      <td>1.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>t</td>\n",
              "      <td>0.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>t</td>\n",
              "      <td>0.87</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4bb6b3ab-348b-403b-b99d-73bec246c093')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4bb6b3ab-348b-403b-b99d-73bec246c093 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4bb6b3ab-348b-403b-b99d-73bec246c093');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7025034e-a4c6-4632-a97a-7d315ee716f7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7025034e-a4c6-4632-a97a-7d315ee716f7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7025034e-a4c6-4632-a97a-7d315ee716f7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  T4U_measured   T4U\n",
              "0            t  1.14\n",
              "1            f     ?\n",
              "2            t  0.91\n",
              "3            f     ?\n",
              "4            t  0.87"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[['T4U_measured','T4U']].head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ykYb8xjusjL3"
      },
      "source": [
        "Since, we are any ways going to handle the missing values, there is no point of having such columns in our dataset.\n",
        "\n",
        "Let's drop such columns as well."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CBsRU4sisMzs"
      },
      "outputs": [],
      "source": [
        "df = df.drop(['TSH_measured','T3_measured','TT4_measured','T4U_measured','FTI_measured','TBG_measured'],axis =1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jr4lsXEVsr16"
      },
      "outputs": [],
      "source": [
        "# Now let's replace the '?' values with numpy nan\n",
        "\n",
        "for column in df.columns:\n",
        "    count = df[column][df[column]=='?'].count()\n",
        "    if count!=0:\n",
        "        df[column] = df[column].replace('?',np.nan)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kiOO_OVEtm9y",
        "outputId": "753e928c-e6c3-406a-8717-d903cd87b3b5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "age 0\n",
            "sex 0\n",
            "on_thyroxine 0\n",
            "query_on_thyroxine 0\n",
            "on_antithyroid_medication 0\n",
            "sick 0\n",
            "pregnant 0\n",
            "thyroid_surgery 0\n",
            "I131_treatment 0\n",
            "query_hypothyroid 0\n",
            "query_hyperthyroid 0\n",
            "lithium 0\n",
            "goitre 0\n",
            "tumor 0\n",
            "hypopituitary 0\n",
            "psych 0\n",
            "TSH 0\n",
            "T3 0\n",
            "TT4 0\n",
            "T4U 0\n",
            "FTI 0\n",
            "referral_source 0\n",
            "Class 0\n"
          ]
        }
      ],
      "source": [
        "for column in df.columns:\n",
        "    count = df[column][df[column]=='?'].count()\n",
        "    if count==0:\n",
        "        print(column, count)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B-89AD5ot2bc"
      },
      "source": [
        "All '?' values replaced with nan. Now let's deal with missing values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Asl8as4ktyQd",
        "outputId": "f8c6ac40-4a01-4fe7-a073-22a0afcc33db"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "age                            1\n",
              "sex                          150\n",
              "on_thyroxine                   0\n",
              "query_on_thyroxine             0\n",
              "on_antithyroid_medication      0\n",
              "sick                           0\n",
              "pregnant                       0\n",
              "thyroid_surgery                0\n",
              "I131_treatment                 0\n",
              "query_hypothyroid              0\n",
              "query_hyperthyroid             0\n",
              "lithium                        0\n",
              "goitre                         0\n",
              "tumor                          0\n",
              "hypopituitary                  0\n",
              "psych                          0\n",
              "TSH                          369\n",
              "T3                           769\n",
              "TT4                          231\n",
              "T4U                          387\n",
              "FTI                          385\n",
              "referral_source                0\n",
              "Class                          0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "PxMqHh0fuUh0",
        "outputId": "86276c1f-07ff-4d15-8bf4-ee2f69700643"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-64a21e4d-761b-48d7-987d-2547cb0bfc45\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>tumor</th>\n",
              "      <th>hypopituitary</th>\n",
              "      <th>psych</th>\n",
              "      <th>TSH</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>referral_source</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>1.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>125</td>\n",
              "      <td>1.14</td>\n",
              "      <td>109</td>\n",
              "      <td>SVHC</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>4.1</td>\n",
              "      <td>2</td>\n",
              "      <td>102</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46</td>\n",
              "      <td>M</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>0.98</td>\n",
              "      <td>NaN</td>\n",
              "      <td>109</td>\n",
              "      <td>0.91</td>\n",
              "      <td>120</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>70</td>\n",
              "      <td>F</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>0.16</td>\n",
              "      <td>1.9</td>\n",
              "      <td>175</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>0.72</td>\n",
              "      <td>1.2</td>\n",
              "      <td>61</td>\n",
              "      <td>0.87</td>\n",
              "      <td>70</td>\n",
              "      <td>SVI</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64a21e4d-761b-48d7-987d-2547cb0bfc45')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-64a21e4d-761b-48d7-987d-2547cb0bfc45 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-64a21e4d-761b-48d7-987d-2547cb0bfc45');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3ff87884-7e8a-422a-aa83-a027cd0abb33\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3ff87884-7e8a-422a-aa83-a027cd0abb33')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3ff87884-7e8a-422a-aa83-a027cd0abb33 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  age sex on_thyroxine query_on_thyroxine on_antithyroid_medication sick  \\\n",
              "0  41   F            f                  f                         f    f   \n",
              "1  23   F            f                  f                         f    f   \n",
              "2  46   M            f                  f                         f    f   \n",
              "3  70   F            t                  f                         f    f   \n",
              "4  70   F            f                  f                         f    f   \n",
              "\n",
              "  pregnant thyroid_surgery I131_treatment query_hypothyroid  ... tumor  \\\n",
              "0        f               f              f                 f  ...     f   \n",
              "1        f               f              f                 f  ...     f   \n",
              "2        f               f              f                 f  ...     f   \n",
              "3        f               f              f                 f  ...     f   \n",
              "4        f               f              f                 f  ...     f   \n",
              "\n",
              "  hypopituitary psych   TSH   T3  TT4   T4U  FTI referral_source     Class  \n",
              "0             f     f   1.3  2.5  125  1.14  109            SVHC  negative  \n",
              "1             f     f   4.1    2  102   NaN  NaN           other  negative  \n",
              "2             f     f  0.98  NaN  109  0.91  120           other  negative  \n",
              "3             f     f  0.16  1.9  175   NaN  NaN           other  negative  \n",
              "4             f     f  0.72  1.2   61  0.87   70             SVI  negative  \n",
              "\n",
              "[5 rows x 23 columns]"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NFGiG7B1v0cp"
      },
      "source": [
        "Since the values are categorical, we have to change them to numerical before we use any imputation techniques.\n",
        "\n",
        "We can use get dummies but since most of the columns have only two distinct categories we will use mapping for them. Why? Because since there are only two categories then the two columns formed after get dummies will both have very high correaltion since they both explain the same thing. So in anyway we will have to drop one of the columns. That's why let's use mapping for such columns. For columns with more than two categories we will use get dummies."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BwmkmQ_zv1HE"
      },
      "outputs": [],
      "source": [
        "# In sex column we have to map 0 for F and 1 for M\n",
        "\n",
        "df['sex'] = df['sex'].map({'F' : 0, 'M' : 1})\n",
        "\n",
        "# except for 'Sex' column all the other columns with two categorical data have same value 'f' and 't'.\n",
        "# let's write map them all in one go\n",
        "for column in df.columns:\n",
        "    if  len(df[column].unique())==2:\n",
        "        df[column] = df[column].map({'f' : 0, 't' : 1})\n",
        "\n",
        "# this will map all the rest of the columns as we require."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "z61zHIqbwwzl",
        "outputId": "208440e8-3991-49b0-ddc1-3b2c3d767551"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-2136df6c-7e9d-40d8-a5f8-f910f1295292\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>tumor</th>\n",
              "      <th>hypopituitary</th>\n",
              "      <th>psych</th>\n",
              "      <th>TSH</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>referral_source</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>125</td>\n",
              "      <td>1.14</td>\n",
              "      <td>109</td>\n",
              "      <td>SVHC</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4.1</td>\n",
              "      <td>2</td>\n",
              "      <td>102</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.98</td>\n",
              "      <td>NaN</td>\n",
              "      <td>109</td>\n",
              "      <td>0.91</td>\n",
              "      <td>120</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>70</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.16</td>\n",
              "      <td>1.9</td>\n",
              "      <td>175</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.72</td>\n",
              "      <td>1.2</td>\n",
              "      <td>61</td>\n",
              "      <td>0.87</td>\n",
              "      <td>70</td>\n",
              "      <td>SVI</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2136df6c-7e9d-40d8-a5f8-f910f1295292')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2136df6c-7e9d-40d8-a5f8-f910f1295292 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2136df6c-7e9d-40d8-a5f8-f910f1295292');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fd8ed1a-eb1d-404f-a474-5871d585c7e7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fd8ed1a-eb1d-404f-a474-5871d585c7e7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fd8ed1a-eb1d-404f-a474-5871d585c7e7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  sick  \\\n",
              "0  41  0.0             0                   0                          0     0   \n",
              "1  23  0.0             0                   0                          0     0   \n",
              "2  46  1.0             0                   0                          0     0   \n",
              "3  70  0.0             1                   0                          0     0   \n",
              "4  70  0.0             0                   0                          0     0   \n",
              "\n",
              "   pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  ...  tumor  \\\n",
              "0         0                0               0                  0  ...      0   \n",
              "1         0                0               0                  0  ...      0   \n",
              "2         0                0               0                  0  ...      0   \n",
              "3         0                0               0                  0  ...      0   \n",
              "4         0                0               0                  0  ...      0   \n",
              "\n",
              "   hypopituitary  psych   TSH   T3  TT4   T4U  FTI referral_source     Class  \n",
              "0              0      0   1.3  2.5  125  1.14  109            SVHC  negative  \n",
              "1              0      0   4.1    2  102   NaN  NaN           other  negative  \n",
              "2              0      0  0.98  NaN  109  0.91  120           other  negative  \n",
              "3              0      0  0.16  1.9  175   NaN  NaN           other  negative  \n",
              "4              0      0  0.72  1.2   61  0.87   70             SVI  negative  \n",
              "\n",
              "[5 rows x 23 columns]"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kRaDQVxYxVhH"
      },
      "source": [
        "Now there are only one column left with more than 2 categories that is referral_source"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SOBRmILFw788",
        "outputId": "f7d8fc0e-4374-413a-aab0-2dc1a8c8c6ee"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['SVHC', 'other', 'SVI', 'STMW', 'SVHD'], dtype=object)"
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['referral_source'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AZ7zOpQuxggw"
      },
      "outputs": [],
      "source": [
        "# we will use get_dummies for refrerral_source\n",
        "df = pd.get_dummies(df, columns=['referral_source'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "-xgoURCBxnIa",
        "outputId": "60c20cb9-c755-4ef5-8a42-e6ea35c69c79"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-a98889d5-2ea5-4777-9f48-458bd6b15717\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>Class</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.5</td>\n",
              "      <td>125</td>\n",
              "      <td>1.14</td>\n",
              "      <td>109</td>\n",
              "      <td>negative</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>102</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>negative</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>109</td>\n",
              "      <td>0.91</td>\n",
              "      <td>120</td>\n",
              "      <td>negative</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>70</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.9</td>\n",
              "      <td>175</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>negative</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.2</td>\n",
              "      <td>61</td>\n",
              "      <td>0.87</td>\n",
              "      <td>70</td>\n",
              "      <td>negative</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a98889d5-2ea5-4777-9f48-458bd6b15717')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a98889d5-2ea5-4777-9f48-458bd6b15717 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a98889d5-2ea5-4777-9f48-458bd6b15717');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5161e6c2-92a4-49dd-b313-ecedcef9bb77\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5161e6c2-92a4-49dd-b313-ecedcef9bb77')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5161e6c2-92a4-49dd-b313-ecedcef9bb77 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  sick  \\\n",
              "0  41  0.0             0                   0                          0     0   \n",
              "1  23  0.0             0                   0                          0     0   \n",
              "2  46  1.0             0                   0                          0     0   \n",
              "3  70  0.0             1                   0                          0     0   \n",
              "4  70  0.0             0                   0                          0     0   \n",
              "\n",
              "   pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  ...   T3  \\\n",
              "0         0                0               0                  0  ...  2.5   \n",
              "1         0                0               0                  0  ...    2   \n",
              "2         0                0               0                  0  ...  NaN   \n",
              "3         0                0               0                  0  ...  1.9   \n",
              "4         0                0               0                  0  ...  1.2   \n",
              "\n",
              "   TT4   T4U  FTI     Class  referral_source_STMW referral_source_SVHC  \\\n",
              "0  125  1.14  109  negative                     0                    1   \n",
              "1  102   NaN  NaN  negative                     0                    0   \n",
              "2  109  0.91  120  negative                     0                    0   \n",
              "3  175   NaN  NaN  negative                     0                    0   \n",
              "4   61  0.87   70  negative                     0                    0   \n",
              "\n",
              "  referral_source_SVHD referral_source_SVI referral_source_other  \n",
              "0                    0                   0                     0  \n",
              "1                    0                   0                     1  \n",
              "2                    0                   0                     1  \n",
              "3                    0                   0                     1  \n",
              "4                    0                   1                     0  \n",
              "\n",
              "[5 rows x 27 columns]"
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SanSUdSOx5RX"
      },
      "source": [
        "Now our ouptut class also has 4 distinct categories. There is no sense of using get dummies with our Output class, so we will just map them. Let's use LabelEncoder function for this."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7-pnuHJ3xxry",
        "outputId": "9a36d410-7b5c-4fce-daf5-10a4f18f2aea"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['negative', 'compensated_hypothyroid', 'primary_hypothyroid',\n",
              "       'secondary_hypothyroid'], dtype=object)"
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['Class'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VGAen62TyQhW"
      },
      "outputs": [],
      "source": [
        "#lblEn = LabelEncoder()\n",
        "#df['Class'] =lblEn.fit_transform(df['Class'])\n",
        "\n",
        "encode = LabelEncoder().fit(df['Class'])\n",
        "\n",
        "df['Class'] = encode.transform(df['Class'])\n",
        "\n",
        "# we will save the encoder as pickle to use when we do the prediction. We will need to decode the predcited values\n",
        "# back to original\n",
        "\n",
        "file = \"enc.pickle\"\n",
        "pickle.dump(encode, open(file, \"wb\"))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "0BaSHISYyaFl",
        "outputId": "200d2cb7-3da1-4c52-9cc2-fb9f4c74eaab"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-e0df31d8-13fd-4d0a-8097-c544be49ea54\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>Class</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.5</td>\n",
              "      <td>125</td>\n",
              "      <td>1.14</td>\n",
              "      <td>109</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>102</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>109</td>\n",
              "      <td>0.91</td>\n",
              "      <td>120</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>70</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.9</td>\n",
              "      <td>175</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.2</td>\n",
              "      <td>61</td>\n",
              "      <td>0.87</td>\n",
              "      <td>70</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0df31d8-13fd-4d0a-8097-c544be49ea54')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e0df31d8-13fd-4d0a-8097-c544be49ea54 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e0df31d8-13fd-4d0a-8097-c544be49ea54');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f11f1c6e-bff2-44f0-952f-d1ad7f856024\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f11f1c6e-bff2-44f0-952f-d1ad7f856024')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f11f1c6e-bff2-44f0-952f-d1ad7f856024 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  sick  \\\n",
              "0  41  0.0             0                   0                          0     0   \n",
              "1  23  0.0             0                   0                          0     0   \n",
              "2  46  1.0             0                   0                          0     0   \n",
              "3  70  0.0             1                   0                          0     0   \n",
              "4  70  0.0             0                   0                          0     0   \n",
              "\n",
              "   pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  ...   T3  \\\n",
              "0         0                0               0                  0  ...  2.5   \n",
              "1         0                0               0                  0  ...    2   \n",
              "2         0                0               0                  0  ...  NaN   \n",
              "3         0                0               0                  0  ...  1.9   \n",
              "4         0                0               0                  0  ...  1.2   \n",
              "\n",
              "   TT4   T4U  FTI  Class  referral_source_STMW referral_source_SVHC  \\\n",
              "0  125  1.14  109      1                     0                    1   \n",
              "1  102   NaN  NaN      1                     0                    0   \n",
              "2  109  0.91  120      1                     0                    0   \n",
              "3  175   NaN  NaN      1                     0                    0   \n",
              "4   61  0.87   70      1                     0                    0   \n",
              "\n",
              "  referral_source_SVHD referral_source_SVI referral_source_other  \n",
              "0                    0                   0                     0  \n",
              "1                    0                   0                     1  \n",
              "2                    0                   0                     1  \n",
              "3                    0                   0                     1  \n",
              "4                    0                   1                     0  \n",
              "\n",
              "[5 rows x 27 columns]"
            ]
          },
          "execution_count": 31,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "20Yd9I-z2Bfi",
        "outputId": "1ce4aa12-f349-4ad5-da72-118d2420afdd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1    3481\n",
              "0     194\n",
              "2      95\n",
              "3       2\n",
              "Name: Class, dtype: int64"
            ]
          },
          "execution_count": 32,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[\"Class\"].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "JRKSRA3U2JXp",
        "outputId": "39aa2c84-e6b6-4752-f6f4-c20c59c9bf0c"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-9db26aa1-ede2-4e47-8c91-f1c78ec0ffd0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>Class</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3771</td>\n",
              "      <td>3622.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>3003</td>\n",
              "      <td>3541</td>\n",
              "      <td>3385</td>\n",
              "      <td>3387</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "      <td>3772.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>93</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>69</td>\n",
              "      <td>241</td>\n",
              "      <td>146</td>\n",
              "      <td>234</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>59</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>101</td>\n",
              "      <td>0.99</td>\n",
              "      <td>100</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>95</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>238</td>\n",
              "      <td>71</td>\n",
              "      <td>95</td>\n",
              "      <td>73</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.315295</td>\n",
              "      <td>0.123012</td>\n",
              "      <td>0.013256</td>\n",
              "      <td>0.011400</td>\n",
              "      <td>0.038971</td>\n",
              "      <td>0.014051</td>\n",
              "      <td>0.014051</td>\n",
              "      <td>0.015642</td>\n",
              "      <td>0.062036</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.974814</td>\n",
              "      <td>0.029692</td>\n",
              "      <td>0.102333</td>\n",
              "      <td>0.010339</td>\n",
              "      <td>0.274125</td>\n",
              "      <td>0.583510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.464698</td>\n",
              "      <td>0.328494</td>\n",
              "      <td>0.114382</td>\n",
              "      <td>0.106174</td>\n",
              "      <td>0.193552</td>\n",
              "      <td>0.117716</td>\n",
              "      <td>0.117716</td>\n",
              "      <td>0.124101</td>\n",
              "      <td>0.241253</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.279508</td>\n",
              "      <td>0.169760</td>\n",
              "      <td>0.303126</td>\n",
              "      <td>0.101169</td>\n",
              "      <td>0.446131</td>\n",
              "      <td>0.493042</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>11 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9db26aa1-ede2-4e47-8c91-f1c78ec0ffd0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9db26aa1-ede2-4e47-8c91-f1c78ec0ffd0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9db26aa1-ede2-4e47-8c91-f1c78ec0ffd0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-529e45f0-39ac-46e5-9e02-55d69dfd3f91\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-529e45f0-39ac-46e5-9e02-55d69dfd3f91')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-529e45f0-39ac-46e5-9e02-55d69dfd3f91 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "         age          sex  on_thyroxine  query_on_thyroxine  \\\n",
              "count   3771  3622.000000   3772.000000         3772.000000   \n",
              "unique    93          NaN           NaN                 NaN   \n",
              "top       59          NaN           NaN                 NaN   \n",
              "freq      95          NaN           NaN                 NaN   \n",
              "mean     NaN     0.315295      0.123012            0.013256   \n",
              "std      NaN     0.464698      0.328494            0.114382   \n",
              "min      NaN     0.000000      0.000000            0.000000   \n",
              "25%      NaN     0.000000      0.000000            0.000000   \n",
              "50%      NaN     0.000000      0.000000            0.000000   \n",
              "75%      NaN     1.000000      0.000000            0.000000   \n",
              "max      NaN     1.000000      1.000000            1.000000   \n",
              "\n",
              "        on_antithyroid_medication         sick     pregnant  thyroid_surgery  \\\n",
              "count                 3772.000000  3772.000000  3772.000000      3772.000000   \n",
              "unique                        NaN          NaN          NaN              NaN   \n",
              "top                           NaN          NaN          NaN              NaN   \n",
              "freq                          NaN          NaN          NaN              NaN   \n",
              "mean                     0.011400     0.038971     0.014051         0.014051   \n",
              "std                      0.106174     0.193552     0.117716         0.117716   \n",
              "min                      0.000000     0.000000     0.000000         0.000000   \n",
              "25%                      0.000000     0.000000     0.000000         0.000000   \n",
              "50%                      0.000000     0.000000     0.000000         0.000000   \n",
              "75%                      0.000000     0.000000     0.000000         0.000000   \n",
              "max                      1.000000     1.000000     1.000000         1.000000   \n",
              "\n",
              "        I131_treatment  query_hypothyroid  ...    T3   TT4   T4U   FTI  \\\n",
              "count      3772.000000        3772.000000  ...  3003  3541  3385  3387   \n",
              "unique             NaN                NaN  ...    69   241   146   234   \n",
              "top                NaN                NaN  ...     2   101  0.99   100   \n",
              "freq               NaN                NaN  ...   238    71    95    73   \n",
              "mean          0.015642           0.062036  ...   NaN   NaN   NaN   NaN   \n",
              "std           0.124101           0.241253  ...   NaN   NaN   NaN   NaN   \n",
              "min           0.000000           0.000000  ...   NaN   NaN   NaN   NaN   \n",
              "25%           0.000000           0.000000  ...   NaN   NaN   NaN   NaN   \n",
              "50%           0.000000           0.000000  ...   NaN   NaN   NaN   NaN   \n",
              "75%           0.000000           0.000000  ...   NaN   NaN   NaN   NaN   \n",
              "max           1.000000           1.000000  ...   NaN   NaN   NaN   NaN   \n",
              "\n",
              "              Class  referral_source_STMW referral_source_SVHC  \\\n",
              "count   3772.000000           3772.000000          3772.000000   \n",
              "unique          NaN                   NaN                  NaN   \n",
              "top             NaN                   NaN                  NaN   \n",
              "freq            NaN                   NaN                  NaN   \n",
              "mean       0.974814              0.029692             0.102333   \n",
              "std        0.279508              0.169760             0.303126   \n",
              "min        0.000000              0.000000             0.000000   \n",
              "25%        1.000000              0.000000             0.000000   \n",
              "50%        1.000000              0.000000             0.000000   \n",
              "75%        1.000000              0.000000             0.000000   \n",
              "max        3.000000              1.000000             1.000000   \n",
              "\n",
              "       referral_source_SVHD referral_source_SVI referral_source_other  \n",
              "count           3772.000000         3772.000000           3772.000000  \n",
              "unique                  NaN                 NaN                   NaN  \n",
              "top                     NaN                 NaN                   NaN  \n",
              "freq                    NaN                 NaN                   NaN  \n",
              "mean               0.010339            0.274125              0.583510  \n",
              "std                0.101169            0.446131              0.493042  \n",
              "min                0.000000            0.000000              0.000000  \n",
              "25%                0.000000            0.000000              0.000000  \n",
              "50%                0.000000            0.000000              1.000000  \n",
              "75%                0.000000            1.000000              1.000000  \n",
              "max                1.000000            1.000000              1.000000  \n",
              "\n",
              "[11 rows x 27 columns]"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.describe(include = \"all\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cbAL5Jf4Q4Xs"
      },
      "source": [
        "Now that we have encoded all our Categorical values. Let's start with imputing the missing values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zxFLAN44-oTJ"
      },
      "outputs": [],
      "source": [
        "imputer=sklearn.impute.KNNImputer(n_neighbors=3, weights='uniform',missing_values=np.nan)\n",
        "new_array=imputer.fit_transform(df) # impute the missing values\n",
        "# convert the nd-array returned in the step above to a Dataframe\n",
        "new_df=pd.DataFrame(data=np.round(new_array), columns=df.columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "CQzvD5vLSnVZ",
        "outputId": "291ce32c-5642-4776-af9a-eb1279bd9c3c"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-3da35a5b-6e17-45b1-bd26-1a3cd4ba6bfb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>Class</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>125.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>108.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>70.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>175.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>177.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3da35a5b-6e17-45b1-bd26-1a3cd4ba6bfb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3da35a5b-6e17-45b1-bd26-1a3cd4ba6bfb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3da35a5b-6e17-45b1-bd26-1a3cd4ba6bfb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cdf1aa16-83a1-4c54-858a-0ec96efaa5cf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cdf1aa16-83a1-4c54-858a-0ec96efaa5cf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cdf1aa16-83a1-4c54-858a-0ec96efaa5cf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  \\\n",
              "0  41.0  0.0           0.0                 0.0                        0.0   \n",
              "1  23.0  0.0           0.0                 0.0                        0.0   \n",
              "2  46.0  1.0           0.0                 0.0                        0.0   \n",
              "3  70.0  0.0           1.0                 0.0                        0.0   \n",
              "4  70.0  0.0           0.0                 0.0                        0.0   \n",
              "\n",
              "   sick  pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  ...  \\\n",
              "0   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "1   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "2   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "3   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "4   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "\n",
              "    T3    TT4  T4U    FTI  Class  referral_source_STMW  referral_source_SVHC  \\\n",
              "0  2.0  125.0  1.0  109.0    1.0                   0.0                   1.0   \n",
              "1  2.0  102.0  1.0  108.0    1.0                   0.0                   0.0   \n",
              "2  2.0  109.0  1.0  120.0    1.0                   0.0                   0.0   \n",
              "3  2.0  175.0  1.0  177.0    1.0                   0.0                   0.0   \n",
              "4  1.0   61.0  1.0   70.0    1.0                   0.0                   0.0   \n",
              "\n",
              "   referral_source_SVHD  referral_source_SVI  referral_source_other  \n",
              "0                   0.0                  0.0                    0.0  \n",
              "1                   0.0                  0.0                    1.0  \n",
              "2                   0.0                  0.0                    1.0  \n",
              "3                   0.0                  0.0                    1.0  \n",
              "4                   0.0                  1.0                    0.0  \n",
              "\n",
              "[5 rows x 27 columns]"
            ]
          },
          "execution_count": 35,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "new_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hQZ3B99kzXit",
        "outputId": "738304f2-da45-4670-92c4-368eab81fd01"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "age                          0\n",
              "sex                          0\n",
              "on_thyroxine                 0\n",
              "query_on_thyroxine           0\n",
              "on_antithyroid_medication    0\n",
              "sick                         0\n",
              "pregnant                     0\n",
              "thyroid_surgery              0\n",
              "I131_treatment               0\n",
              "query_hypothyroid            0\n",
              "query_hyperthyroid           0\n",
              "lithium                      0\n",
              "goitre                       0\n",
              "tumor                        0\n",
              "hypopituitary                0\n",
              "psych                        0\n",
              "TSH                          0\n",
              "T3                           0\n",
              "TT4                          0\n",
              "T4U                          0\n",
              "FTI                          0\n",
              "Class                        0\n",
              "referral_source_STMW         0\n",
              "referral_source_SVHC         0\n",
              "referral_source_SVHD         0\n",
              "referral_source_SVI          0\n",
              "referral_source_other        0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "new_df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AmDc23GL6Ml8"
      },
      "source": [
        "Now there are no missing values in our new dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xdM8Z2PQ6UJq"
      },
      "source": [
        "Let's check the distribution for our continous data in the dataset:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "nKtwkbq7zaqk",
        "outputId": "f12f9d4d-9112-4a17-e0b9-af39d3dfb0c2"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-37-7945da5de80d>:8: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(new_df[column])\n",
            "<ipython-input-37-7945da5de80d>:8: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(new_df[column])\n",
            "<ipython-input-37-7945da5de80d>:8: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(new_df[column])\n",
            "<ipython-input-37-7945da5de80d>:8: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(new_df[column])\n",
            "<ipython-input-37-7945da5de80d>:8: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(new_df[column])\n",
            "<ipython-input-37-7945da5de80d>:8: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(new_df[column])\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1700x1500 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "columns = ['age','TSH','T3','TT4','T4U','FTI']\n",
        "\n",
        "plt.figure(figsize=(17,15),facecolor='white')\n",
        "plotnumber = 1\n",
        "\n",
        "for column in columns:\n",
        "    ax = plt.subplot(3,2,plotnumber)\n",
        "    sns.distplot(new_df[column])\n",
        "    plt.xlabel(column,fontsize=10)\n",
        "    plotnumber+=1\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BevQrfoh7pMh"
      },
      "source": [
        "Let's do some transformations to the data and see if it improves the plot.\n",
        "\n",
        "Before doing log transformation , let's add 1 to each valuue in the column to handle exception when we try to find log of '0'."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wuRLpFpa6e2s",
        "outputId": "2a67fd7e-8867-427b-8391-6d72bb2d4022"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-40-558becad32d9>:9: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(np.log(new_df[column]))\n",
            "<ipython-input-40-558becad32d9>:9: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(np.log(new_df[column]))\n",
            "<ipython-input-40-558becad32d9>:9: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(np.log(new_df[column]))\n",
            "<ipython-input-40-558becad32d9>:9: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(np.log(new_df[column]))\n",
            "<ipython-input-40-558becad32d9>:9: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(np.log(new_df[column]))\n",
            "<ipython-input-40-558becad32d9>:9: UserWarning: \n",
            "\n",
            "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
            "\n",
            "Please adapt your code to use either `displot` (a figure-level function with\n",
            "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
            "\n",
            "For a guide to updating your code to use the new functions, please see\n",
            "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
            "\n",
            "  sns.distplot(np.log(new_df[column]))\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1700x1500 with 6 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "columns = ['age','TSH','T3','TT4','T4U','FTI']\n",
        "\n",
        "plt.figure(figsize=(17,15),facecolor='white')\n",
        "plotnumber = 1\n",
        "\n",
        "for column in columns:\n",
        "    new_df[column]+=1\n",
        "    ax = plt.subplot(3,2,plotnumber)\n",
        "    sns.distplot(np.log(new_df[column]))\n",
        "    plt.xlabel(column,fontsize=10)\n",
        "    plotnumber+=1\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WKurjeh29uIk"
      },
      "source": [
        "After log transformation, rest of the columns look fine but 'TSH' has a weird trend.\n",
        "\n",
        "It won't give much of information so let's drop this column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vs9Ct6qx8ubj"
      },
      "outputs": [],
      "source": [
        "new_df = new_df.drop(['TSH'],axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3y8bthOZ-8r6"
      },
      "source": [
        "let's see how balanced our dataset in terms of given target classes:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 434
        },
        "id": "BRvh-faV-_aH",
        "outputId": "0123529d-bc00-4541-fe12-9fff9ceda9c8"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlQAAAGhCAYAAACnLyoeAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAcp0lEQVR4nO3df6zV9X3H8de9IFDAcwkE8FetXIyM/XDE6fR611vXzViixHbTQrXN9Ufau42sDkw2tzREgu0oziwTuvk7VbNJ7bY0zikpTictZF1dbbfa1imXOgcZMGjPvVDh4r1nf1gpd1dQ7ude7rnex+Mfcz/nfL68T+Ifz3zP535vQ61WqwUAgEFrHOkBAABGO0EFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhcaP9AD1rFarpa/Pc08BYLRobGxIQ0PDCf93BdUx9PXVsnfv/pEeAwB4h6ZPn5Jx4058UPnKDwCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAK1VVQvfLKK1mxYkWuvPLK/PzP/3yuuOKKd7SvVqvlnnvuySWXXJJzzz03ixcvzre//e3hHRYA4KfqKqheeumlPPvss3nf+96XuXPnvuN99957b+68885cd911ufvuuzNz5szccMMNefXVV4dxWgCANzTUarXaSA/xpr6+vjQ2vtF4t9xyS7773e/m8ccfP+aegwcP5uKLL861116b5cuXJ0l6enryoQ99KG1tbbn11lsHPU9vb1/27t0/6P0AwIk1ffqUjBt34u8X1dUdqjdj6nh861vfyr59+7Jw4cLDaxMmTMill16aTZs2DeV4AABvafxID1Cqs7MzSdLc3Nxvfe7cuXnwwQdz4MCBTJo0adDXnzBhfN68idfQ0HB4vWTtSEN97aFaq4cZjrV2pHqaa7TOWg8zHGvtSPU012idtR5mONbakepprtE6az3McKy1Iw3Ntd/y0sNu1AdVV1dXJkyYkIkTJ/Zbr1QqqdVqqVargw6qxsaGnHzyxJ/+D5kkP/t2tGTtSEN97aFaq4cZjrV2pHqaa7TOWg8zHGvtSPU012idtR5mONbakepprtE6az3McKy1Iw3FtQVVHWpoaDhcv2/8p+H/vT74taG6znCu1cMMx1qrhxneTbPWwwzHWquHGd5Ns9bDDMdaq4cZ3k2z1sMMx1ob2muPjLo6QzUYlUolPT09OXjwYL/1rq6uNDQ0pKmpaYQmAwDGilEfVG+endq2bVu/9c7Ozpx22mlF56cAAN6JUR9U5513XqZOnZonn3zy8NqhQ4fy1a9+NW1tbSM4GQAwVtTVGarXXnstzz77bJJk+/bt2bdvXzZs2JAk+dVf/dVMnz497e3t2bFjRzZu3JgkmThxYjo6OrJ27dpMnz4955xzTh555JH8+Mc/zo033jhinwUAGDvqKqj27NmTm266qd/amz8/9NBDufDCC9PX15fe3t5+7/nkJz+ZWq2WBx54IHv37s38+fNz//33573vfe8Jmx0AGLvq6knpAACj0ag/QwUAMNIEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAheouqLZu3Zrrr78+CxYsSGtra9asWZOenp633fejH/0oK1asyCWXXJIFCxbkiiuuyCOPPHICJgYAxrrxIz3AkarVatrb23PWWWdl7dq12blzZ1avXp0DBw5kxYoVx9x70003pbOzM8uXL8+pp56aTZs25dZbb824cePy0Y9+9AR9AgBgLKqroFq/fn3279+fdevWZdq0aUmS3t7erFy5Mh0dHZk9e/Zb7tu9e3e+8Y1v5E//9E/zW7/1W0mSlpaW/Md//Ef+8R//UVABAMOqrr7y27RpU1paWg7HVJIsXLgwfX192bx581H3vf7660mSk08+ud/61KlTU6vVhmVWAIA31VVQdXZ2prm5ud9apVLJzJkz09nZedR9p556an7t134td911V15++eXs27cvTzzxRDZv3pxrr712uMcGAMa4uvrKr6urK5VKZcB6U1NTqtXqMfeuXbs2y5Yty+WXX54kGTduXD7zmc/ksssuG5ZZAQDeVFdBNVi1Wi1//Md/nB/+8Ie54447MnPmzGzZsiWf+9zn0tTUdDiyAACGQ10FVaVSSXd394D1arWapqamo+7753/+52zYsCGPPfZY5s2blyS58MILs2fPnqxevVpQAQDDqq7OUDU3Nw84K9Xd3Z3du3cPOFt1pJdffjnjxo3LOeec0299/vz52bVrV1577bVhmRcAIKmzoGpra8uWLVvS1dV1eG3Dhg1pbGxMa2vrUfedfvrp6e3tzYsvvthv/YUXXsiMGTPynve8Z9hmBgBoqNXRcwWq1Wouv/zyzJkzJx0dHYcf7Llo0aJ+D/Zsb2/Pjh07snHjxiTJvn37smjRopx00klZunRpZs2ala9//et54IEH8vu///v5vd/7vZH6SADAGFBXQZW88adnVq1aleeffz5TpkzJlVdemWXLlmXChAmH3/OJT3wi27dvz9NPP3147ZVXXsmf//mf59/+7d/S3d2dM844I1dffXU+/vGPZ9y4cSPxUQCAMaLuggoAYLSpqzNUAACjkaACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKBQ3QXV1q1bc/3112fBggVpbW3NmjVr0tPT84727ty5M3/0R3+Uiy66KOeee24WLlyYxx57bJgnBgDGuvEjPcCRqtVq2tvbc9ZZZ2Xt2rXZuXNnVq9enQMHDmTFihXH3Ltr164sXrw4c+bMyapVqzJ16tS89NJL7zjGAAAGq66Cav369dm/f3/WrVuXadOmJUl6e3uzcuXKdHR0ZPbs2Ufde/vtt+eUU07Jfffdl3HjxiVJWlpaTsTYAMAYV1df+W3atCktLS2HYypJFi5cmL6+vmzevPmo+/bt25cnn3wy11xzzeGYAgA4UeoqqDo7O9Pc3NxvrVKpZObMmens7DzqvhdeeCGHDh3K+PHj8/GPfzy/8Au/kNbW1tx+++05dOjQcI8NAIxxdRVUXV1dqVQqA9abmppSrVaPuu9///d/kySf+cxn8ou/+Iu5//77097engcffDB33nnnsM0LAJDU2Rmqwerr60uSXHzxxbnllluSJBdddFH279+fBx54IEuXLs2kSZNGckQA4F2sru5QVSqVdHd3D1ivVqtpamo65r7kjYg6UktLS3p6evLKK68M7aAAAEeoq6Bqbm4ecFaqu7s7u3fvHnC26khnn332Ma978ODBIZkPAOCt1FVQtbW1ZcuWLenq6jq8tmHDhjQ2Nqa1tfWo+04//fScc8452bJlS7/1LVu2ZNKkSW8bXAAAJeoqqJYsWZIpU6Zk6dKl+frXv56/+7u/y5o1a7JkyZJ+z6Bqb2/PpZde2m/vsmXL8vTTT+ezn/1sNm/enLvuuisPPPBArrvuukyePPlEfxQAYAxpqNVqtcFs/MpXvpLzzz8/Z5xxxlu+/t///d957rnn8uEPf/i4rrt169asWrUqzz//fKZMmZIrr7wyy5Yty4QJEw6/5xOf+ES2b9+ep59+ut/eJ554In/5l3+ZH/7wh5k1a1YWL16cT33qU2loaDjuzwcA8E4NOqjmz5+fNWvWZNGiRW/5+hNPPJGbb7453//+94sGBACod4P+yu/tOuwnP/mJp5YDAGPCcT2H6gc/+EF+8IMfHP75ueeeS29v74D3dXV1Zf369ZkzZ075hAAAde64vvJbt25d1q1b98bGhoZj3qWqVCr5/Oc/n1//9V8vnxIAoI4dV1Dt2rUru3btSq1Wy9VXX51Pf/rTaWtr63/Bhoa85z3vyZlnnpnx498VD2IHADimQR9K/9d//dfMnTs3M2bMGOqZAABGlUEHFQAAbyj6Tu5rX/ta/vZv/zavvvpqurq6BpypamhoyFNPPVU0IABAvRt0UN1333254447MmPGjJx77rmZN2/eUM4FADBqDPorv7a2tsydOzf33HNPTjrppKGeCwBg1Bj0gz27urpy2WWXiSkAYMwbdFD90i/9UrZt2zaUswAAjEqDDqpbb701GzduzD/8wz8M5TwAAKPOoM9QLVq0KNVqNbt3787kyZNzyimnpLGxf581NDTkscceG5JBAQDq1aB/y2/atGmZNm1a3ve+9w3lPAAAo44HewIAFBr0GSoAAN4w6K/8vvnNb76j911wwQWD/ScAAEaFQX/l93M/93NpaGh42/d9//vfH8zlAQBGjUHfoXrooYcGrPX29mb79u159NFH09fXl5tvvrloOACA0WBYDqX39fXlmmuuSUtLS2666aahvjwAQF0ZlkPpjY2Nufzyy/PlL395OC4PAFBXhu23/KrVarq7u4fr8gAAdWPQZ6h27NjxlutdXV157rnncv/99+f8888f9GAAAKPFsPyWX61Wy4IFC/Jnf/ZnOeOMM4oGBACod4MOqr//+78fEFQNDQ2pVCo588wzc/bZZw/JgAAA9c6fngEAKDToM1RHevnll7N9+/Ykyemnn+7uFAAwphQF1VNPPZXVq1cfjqk3nXHGGbnlllvyG7/xG0XDAQCMBoP+yu/ZZ5/N7/7u7+a0007LRz/60cydOzdJsnXr1jz66KPZsWNH7rrrrrS1tQ3pwAAA9WbQQbV48eL09PTkr//6rzN58uR+r/3kJz/JNddck4kTJ+ZLX/rSkAwKAFCvBv1gzxdffDEf/vCHB8RUkkyePDkf+chH8uKLLxYNBwAwGgw6qCZOnJhqtXrU16vVaiZOnDjYywMAjBqDDqoLL7wwDz30UJ5//vkBr33nO9/Jww8/nJaWlqLhAABGg0GfoXr11VezZMmS7N27N+eee27mzJmTJNm2bVv+/d//PTNmzMj69es9KR0AeNcrerDnnj17cvfdd2fTpk2H/7bfaaedlg984AP51Kc+lRkzZgzZoAAA9WrQQfX666/nwIEDmTp16lu+vm/fvkyaNCnjxw/Js0MBAOrWoM9Q3XbbbVmyZMlRX//Yxz6W1atXD/byAACjxqCD6mtf+1ouu+yyo75+2WWXZdOmTYO9PADAqDHooNq1a1dmz5591NdnzZqVnTt3DvbyAACjxqCDatq0adm2bdtRX9+6detRz1cBALybDDqo3v/+92f9+vX53ve+N+C1F154IY8++qi/4wcAjAmD/i2/nTt35qqrrsrevXvzwQ9+MGeffXaS5KWXXsozzzyT6dOn58tf/nJOOeWUIR0YAKDeFD2HateuXbnjjjvyT//0T9m3b1+SZOrUqfnN3/zNLFu27JhnrAAA3i2KgupNtVote/fuTZJMnz49DQ0NxYMBAIwWQxJUAABj2aAPpQMA8AZBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQKG6C6qtW7fm+uuvz4IFC9La2po1a9akp6fnuK7xxS9+MfPmzUtHR8cwTQkA8DPjR3qAI1Wr1bS3t+ess87K2rVrs3PnzqxevToHDhzIihUr3tE1du/enS984QuZMWPGME8LAPCGugqq9evXZ//+/Vm3bl2mTZuWJOnt7c3KlSvT0dGR2bNnv+01br/99nzwgx/Mjh07hnlaAIA31NVXfps2bUpLS8vhmEqShQsXpq+vL5s3b37b/c8991yeeuqp3HzzzcM4JQBAf3UVVJ2dnWlubu63VqlUMnPmzHR2dh5zb29vb1atWpXf+Z3fyaxZs4ZzTACAfuoqqLq6ulKpVAasNzU1pVqtHnPv3/zN3+S1117LddddN0zTAQC8tbo6QzVYe/bsyZ133pnPf/7zmTBhwkiPAwCMMXUVVJVKJd3d3QPWq9VqmpqajrrvL/7iLzJv3rycf/756erqSpK8/vrref3119PV1ZXJkydn/Pi6+qgAwLtIXVVGc3PzgLNS3d3d2b1794CzVUfatm1bvvnNb+aCCy4Y8NoFF1yQe++9N21tbUM+LwBAUmdB1dbWlrvuuqvfWaoNGzaksbExra2tR933J3/yJ4fvTL3pc5/7XCZNmpTly5dn3rx5wzo3ADC21VVQLVmyJA8//HCWLl2ajo6O7Ny5M2vWrMmSJUv6PYOqvb09O3bsyMaNG5Mk8+fPH3CtSqWSyZMn58ILLzxh8wMAY1Nd/ZZfU1NTHnzwwYwbNy5Lly7NHXfckauuuiq33HJLv/f19fWlt7d3hKYEAOivoVar1UZ6CACA0ayu7lABAIxGggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoJCgAgAoJKgAAAoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgELjR3qA/2/r1q257bbb8vzzz2fKlCm58sor8wd/8AeZMGHCUffs2rUrX/ziF7N58+b813/9V04++eRccMEFWb58eU4//fQTOD0AMBbVVVBVq9W0t7fnrLPOytq1a7Nz586sXr06Bw4cyIoVK46674UXXsjGjRvz27/92/nlX/7l/OhHP8pf/dVf5eqrr87jjz+e6dOnn8BPAQCMNXUVVOvXr8/+/fuzbt26TJs2LUnS29ublStXpqOjI7Nnz37Lfb/yK7+SJ598MuPH/+zjnHfeebnkkkvyla98JTfccMOJGB8AGKPq6gzVpk2b0tLScjimkmThwoXp6+vL5s2bj7qvUqn0i6kkOeWUUzJ9+vTs2rVruMYFAEhSZ0HV2dmZ5ubmfmuVSiUzZ85MZ2fncV1r27Zt2bNnT+bOnTuUIwIADFBXQdXV1ZVKpTJgvampKdVq9R1fp1ar5bbbbsusWbNy+eWXD+WIAAAD1NUZqqGydu3a/Mu//Evuu+++TJ48eaTHAQDe5eoqqCqVSrq7uwesV6vVNDU1vaNrPProo/nCF76Qz372s2lpaRnqEQEABqirr/yam5sHnJXq7u7O7t27B5yteisbN27Mrbfemk9/+tO56qqrhmtMAIB+6iqo2trasmXLlnR1dR1e27BhQxobG9Pa2nrMvd/4xjeyfPnyXH311Vm6dOlwjwoAcFhDrVarjfQQb6pWq7n88sszZ86cdHR0HH6w56JFi/o92LO9vT07duzIxo0bk7zxdPXFixfn1FNPzcqVK9PY+LNOnD59es4888wT/lkAgLGjrs5QNTU15cEHH8yqVauydOnSTJkyJVdddVWWLVvW7319fX3p7e09/PN3vvOddHd3p7u7Ox/72Mf6vfcjH/lIVq9efULmBwDGprq6QwUAMBrV1RkqAIDRSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFBJUAACFBBUAQCFBBQBQSFABABQSVAAAhQQVAEAhQQUAUEhQAQAUElQAAIUEFQBAIUEFAFBIUAEAFKq7oNq6dWuuv/76LFiwIK2trVmzZk16enredl+tVss999yTSy65JOeee24WL16cb3/728M/MAAw5tVVUFWr1bS3t+fQoUNZu3Ztli1blkcffTSrV69+27333ntv7rzzzlx33XW5++67M3PmzNxwww159dVXT8DkAMBY1lCr1WojPcSb7r777tx111155plnMm3atCTJl770paxcuTLPPPNMZs+e/Zb7Dh48mIsvvjjXXnttli9fniTp6enJhz70obS1teXWW289QZ8AABiL6uoO1aZNm9LS0nI4ppJk4cKF6evry+bNm4+671vf+lb27duXhQsXHl6bMGFCLr300mzatGk4RwYAqK+g6uzsTHNzc7+1SqWSmTNnprOz85j7kgzYO3fu3OzYsSMHDhwY+mEBAH6qroKqq6srlUplwHpTU1Oq1eox902YMCETJ07st16pVFKr1Y65FwCgVF0FFQDAaFRXQVWpVNLd3T1gvVqtpqmp6Zj7enp6cvDgwX7rXV1daWhoOOZeAIBSdRVUzc3NA85KdXd3Z/fu3QPOR/3/fUmybdu2fuudnZ057bTTMmnSpKEfFgDgp+oqqNra2rJly5Z0dXUdXtuwYUMaGxvT2tp61H3nnXdepk6dmieffPLw2qFDh/LVr341bW1twzozAMD4kR7gSEuWLMnDDz+cpUuXpqOjIzt37syaNWuyZMmSfs+gam9vz44dO7Jx48YkycSJE9PR0ZG1a9dm+vTpOeecc/LII4/kxz/+cW688caR+jgAwBhRV0HV1NSUBx98MKtWrcrSpUszZcqUXHXVVVm2bFm/9/X19aW3t7ff2ic/+cnUarU88MAD2bt3b+bPn5/7778/733ve0/kRwAAxqC6elI6AMBoVFdnqAAARiNBBQBQSFABABQSVAAAhQQVAEAhQQUAUKiunkM1El555ZVcccUV6enpGelRAIA6cOONN+YP//APj2vPmL9D9dJLL4kpAOCw7373u8e9Z8w/2LOvry+bN2/Of/7nf+bxxx/P9773vZEeCQAYQQ0NDXn22Wf7/dm7tzPm71A1Njbm/e9/f2688cbs3LlzpMcBAEZYrVbL5s2bj2vPmA+qI3V3d4/0CADACJswYUI6OzuPa4+gOsKhQ4dGegQAYIQ1NjamWq0e355hmgUAYFQazC+rCaojNDQ0jPQIAMAI6+vrS1NT03HtEVQ/9T//8z/p6+sb6TEAgDrQ3Nx8XO8XVEn27duXD3zgAyM9BgBQJ1pbW4/r/WM+qF577bVcdNFFIz0GAFAnzj777Jx00knHtWfMB9WePXv8dh8AcNjLL7+cl1566bj2jPknpQMAlBrzd6gAAEoJKgCAQoIKAKCQoAIAKCSoAAAKCSoAgEKCCgCgkKACACgkqAAACgkqAIBCggoAoND/AfEYP5IWoefUAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# let's see how data is distributed for every column for every individual id\n",
        "# the graph plot below is for individual ids. Press 1 in the  input box below the graph to continue viewing graph for each id!!\n",
        "\n",
        "# plt.figure(figsize=(20,25), facecolor='white')\n",
        "# plotnumber = 1\n",
        "# plt_data = df.drop(['age'], axis =1)\n",
        "\n",
        "# for column in plt_data:\n",
        "#     ax = plt.subplot(6,5,plotnumber)\n",
        "#     sns.countplot(plt_data[column])\n",
        "#     plt.xlabel(column,fontsize=10)\n",
        "#     plotnumber+=1\n",
        "# plt.show()\n",
        "\n",
        "\n",
        "sns.countplot(new_df['Class'])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vvxH7hOHAMmv"
      },
      "source": [
        "We can clerly see that the dataset is highly imbalanced.\n",
        "\n",
        "We will use a python library known as imbalanced-learn to deal with imbalanced data. Imbalanced learn has an algorithm called RandomOverSampler."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dtaTqKTc_rMv"
      },
      "outputs": [],
      "source": [
        "x = new_df.drop(['Class'],axis=1)\n",
        "y = new_df['Class']\n",
        "rdsmple = RandomOverSampler()\n",
        "x_sampled,y_sampled  = rdsmple.fit_resample(x,y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zJL6qtIwC_Sq",
        "outputId": "5e005745-0548-4923-f691-53ecb9bcd8ed"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(13924, 25)"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_sampled.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "FhxtwbWGDHPv",
        "outputId": "698156e4-35c6-438d-8ce7-a55495f79297"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_sampled"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-bba8146a-5bc1-4061-8bda-1569b38351b4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>psych</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>42.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>176.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bba8146a-5bc1-4061-8bda-1569b38351b4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bba8146a-5bc1-4061-8bda-1569b38351b4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bba8146a-5bc1-4061-8bda-1569b38351b4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f920aae3-6e67-49e9-9cff-1fe76b5d4f2c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f920aae3-6e67-49e9-9cff-1fe76b5d4f2c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f920aae3-6e67-49e9-9cff-1fe76b5d4f2c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  \\\n",
              "0  42.0  0.0           0.0                 0.0                        0.0   \n",
              "1  24.0  0.0           0.0                 0.0                        0.0   \n",
              "2  47.0  1.0           0.0                 0.0                        0.0   \n",
              "3  71.0  0.0           1.0                 0.0                        0.0   \n",
              "4  71.0  0.0           0.0                 0.0                        0.0   \n",
              "\n",
              "   sick  pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  ...  \\\n",
              "0   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "1   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "2   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "3   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "4   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "\n",
              "   psych   T3    TT4  T4U    FTI  referral_source_STMW  referral_source_SVHC  \\\n",
              "0    0.0  3.0  126.0  2.0  110.0                   0.0                   1.0   \n",
              "1    0.0  3.0  103.0  2.0  109.0                   0.0                   0.0   \n",
              "2    0.0  3.0  110.0  2.0  121.0                   0.0                   0.0   \n",
              "3    0.0  3.0  176.0  2.0  178.0                   0.0                   0.0   \n",
              "4    0.0  2.0   62.0  2.0   71.0                   0.0                   0.0   \n",
              "\n",
              "   referral_source_SVHD  referral_source_SVI  referral_source_other  \n",
              "0                   0.0                  0.0                    0.0  \n",
              "1                   0.0                  0.0                    1.0  \n",
              "2                   0.0                  0.0                    1.0  \n",
              "3                   0.0                  0.0                    1.0  \n",
              "4                   0.0                  1.0                    0.0  \n",
              "\n",
              "[5 rows x 25 columns]"
            ]
          },
          "execution_count": 45,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_sampled = pd.DataFrame(data = x_sampled, columns = x.columns)\n",
        "x_sampled.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "aZgfoTwBDL-R",
        "outputId": "9da8caa4-681e-4eef-f4e2-005361a702d6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: ylabel='count'>"
            ]
          },
          "execution_count": 46,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlkAAAGhCAYAAABS0aGuAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAcd0lEQVR4nO3db5CV5X3/8c8uCAjkLAMD+C9GFwdC/1DGas266damdQhjHJMWA9FkFs0k25ZpLPigtpNhYDApwTqZAmn9hxN0GolpO4lNlQlWKwlM01hN2lrjKEushRmgkpxdiLC6e34P/EndrouwcLFn4fV6xnXu6+R7r3nwnnOuvbehVqvVAgDASdU43AMAAJyORBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYwe7gHqWa1WS1+fZ7UCwEjR2NiQhoaG4R4jicg6qr6+WvbvPzjcYwAAx2jy5AkZNao+IsvXhQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAF1FVkvv/xyli9fnuuuuy6/8Au/kI985CPHtK9Wq+Wee+7JVVddlTlz5mThwoX54Q9/WHZYAICjqKvIevHFF/PUU0/lfe97X2bMmHHM++69996sXbs2ixcvzt13352pU6fm5ptvziuvvFJwWgCAwTXUarXacA/xlr6+vjQ2vtl9t912W/7jP/4j3/72t4+65/Dhw7nyyitz4403ZtmyZUmSnp6efPjDH05bW1tWrFgx5Hl6e/uyf//BIe8HAE6tyZMnZNSo+vgMqT6m+P/eCqzj8cwzz+TAgQOZP3/+kbUxY8bk6quvztatW0/meAAAx2z0cA9wojo7O5Mkzc3N/dZnzJiRjRs35tChQxk3btyQ3/+ss0aloaHhmK6t1Wp564PBhoaGut93PHuGuu90/pmczvc21H2n88/kdL63oe47nX8mp/O9DXXfSPmZ1JMRH1ldXV0ZM2ZMxo4d22+9UqmkVqulWq0OObIaGxtSqZyd5Ni+UX37/wn6+mp1v+949gx13+n8Mzmd722o+07nn8npfG9D3Xc6/0xO53sb6r6R9DOpFyM+skp68z9wkhz/f7DGxoa63zcSZjzV+0bCjEPdNxJmPNX7RsKMQ903EmY81ftGwoxD3TcSZhyOfcOtrs5kDUWlUklPT08OHz7cb72rqysNDQ1pamoapskAgDPZiI+st85i7dy5s996Z2dnzjvvvBM6jwUAMFQjPrIuvfTSTJw4MY899tiRtddffz3f+c530tbWNoyTAQBnsro6k/Xaa6/lqaeeSpLs2rUrBw4cyObNm5Mkv/Zrv5bJkyenvb09u3fvzpYtW5IkY8eOTUdHR9atW5fJkydn5syZeeihh/Kzn/0sn/70p4ftXgCAM1tdRdarr76aW265pd/aW/9+4IEHcsUVV6Svry+9vb39rvnMZz6TWq2W+++/P/v378/s2bOzYcOGvPe97z1lswMAvF1dPfEdAOB0MeLPZAEA1CORBQBQgMgCAChAZAEAFCCyAAAKEFkAAAWILACAAkQWAEABIgsAoACRBQBQgMgCAChAZAEAFCCyAAAKEFkAAAWILACAAkQWAEABIgsAoACRBQBQgMgCAChAZAEAFCCyAAAKEFkAAAWILACAAkQWAEABIgsAoACRBQBQgMgCAChAZAEAFCCyAAAKEFkAAAWILACAAkQWAEABIgsAoACRBQBQgMgCAChAZAEAFCCyAAAKEFkAAAWILACAAkQWAEABIgsAoACRBQBQgMgCAChAZAEAFCCyAAAKEFkAAAWILACAAkQWAEABIgsAoACRBQBQgMgCAChAZAEAFCCyAAAKEFkAAAWILACAAkQWAEABIgsAoIC6i6wdO3bkpptuyty5c9Pa2po1a9akp6fnXff99Kc/zfLly3PVVVdl7ty5+chHPpKHHnroFEwMADDQ6OEe4O2q1Wra29tz0UUXZd26ddmzZ09Wr16dQ4cOZfny5Ufde8stt6SzszPLli3Lueeem61bt2bFihUZNWpUPv7xj5+iOwAAeFNdRdamTZty8ODBrF+/PpMmTUqS9Pb2ZuXKleno6Mj06dPfcd++ffvy/e9/P3/2Z3+W3/md30mStLS05N///d/zD//wDyILADjl6urrwq1bt6alpeVIYCXJ/Pnz09fXl23btg2674033kiSvOc97+m3PnHixNRqtSKzAgAcTV1FVmdnZ5qbm/utVSqVTJ06NZ2dnYPuO/fcc/PBD34wd911V1566aUcOHAgjz76aLZt25Ybb7yx9NgAAAPU1deFXV1dqVQqA9abmppSrVaPunfdunVZunRprrnmmiTJqFGj8vnPfz7z5s0rMisAwNHUVWQNVa1Wy5/8yZ/kJz/5Se68885MnTo127dvzxe/+MU0NTUdCS8AgFOlriKrUqmku7t7wHq1Wk1TU9Og+/7pn/4pmzdvziOPPJJZs2YlSa644oq8+uqrWb16tcgCAE65ujqT1dzcPODsVXd3d/bt2zfgrNbbvfTSSxk1alRmzpzZb3327NnZu3dvXnvttSLzAgAMpq4iq62tLdu3b09XV9eRtc2bN6exsTGtra2D7jv//PPT29ubF154od/6c889lylTpuTss88uNjMAwDtpqNXRMw6q1WquueaaXHzxxeno6DjyMNJrr72238NI29vbs3v37mzZsiVJcuDAgVx77bU566yzsmTJkkybNi3f+973cv/99+cP//AP8wd/8AfDdUsAwBmqriIrefPP6qxatSrPPvtsJkyYkOuuuy5Lly7NmDFjjlzzqU99Krt27coTTzxxZO3ll1/Ol7/85fzrv/5ruru7c8EFF+T666/PJz/5yYwaNWo4bgUAOIPVXWQBAJwO6upMFgDA6UJkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKKDuImvHjh256aabMnfu3LS2tmbNmjXp6ek5pr179uzJH//xH+cDH/hA5syZk/nz5+eRRx4pPDEAwECjh3uAt6tWq2lvb89FF12UdevWZc+ePVm9enUOHTqU5cuXH3Xv3r17s3Dhwlx88cVZtWpVJk6cmBdffPGYAw0A4GSqq8jatGlTDh48mPXr12fSpElJkt7e3qxcuTIdHR2ZPn36oHvvuOOOnHPOObnvvvsyatSoJElLS8upGBsAYIC6+rpw69ataWlpORJYSTJ//vz09fVl27Ztg+47cOBAHnvssdxwww1HAgsAYDjVVWR1dnamubm531qlUsnUqVPT2dk56L7nnnsur7/+ekaPHp1PfvKT+cVf/MW0trbmjjvuyOuvv156bACAAeoqsrq6ulKpVAasNzU1pVqtDrrvf/7nf5Ikn//85/NLv/RL2bBhQ9rb27Nx48asXbu22LwAAIOpqzNZQ9XX15ckufLKK3PbbbclST7wgQ/k4MGDuf/++7NkyZKMGzduOEcEAM4wdfVJVqVSSXd394D1arWapqamo+5L3gyrt2tpaUlPT09efvnlkzsoAMC7qKvIam5uHnD2qru7O/v27RtwVuvtLrnkkqO+7+HDh0/KfAAAx6quIqutrS3bt29PV1fXkbXNmzensbExra2tg+47//zzM3PmzGzfvr3f+vbt2zNu3Lh3jTAAgJOtriJr0aJFmTBhQpYsWZLvfe97+du//dusWbMmixYt6veMrPb29lx99dX99i5dujRPPPFEvvCFL2Tbtm256667cv/992fx4sUZP378qb4VAOAM11Cr1WpD2fjNb34zl112WS644IJ3fP2///u/8/TTT+ejH/3ocb3vjh07smrVqjz77LOZMGFCrrvuuixdujRjxow5cs2nPvWp7Nq1K0888US/vY8++mj+8i//Mj/5yU8ybdq0LFy4MJ/97GfT0NBw3PcHAHAihhxZs2fPzpo1a3Lttde+4+uPPvpobr311jz//PMnNCAAwEg05K8L363Nfv7zn3v6OgBwxjqu52T9+Mc/zo9//OMj/3766afT29s74Lqurq5s2rQpF1988YlPCAAwAh3X14Xr16/P+vXr39zY0HDUT7MqlUq+9KUv5Td/8zdPfEoAgBHmuCJr79692bt3b2q1Wq6//vp87nOfS1tbW/83bGjI2WefnQsvvDCjR58WD5QHADhuQz74/i//8i+ZMWNGpkyZcrJnAgAY8YYcWQAADO6Evs/77ne/m7/5m7/JK6+8kq6urgFntBoaGvL444+f0IAAACPRkCPrvvvuy5133pkpU6Zkzpw5mTVr1smcCwBgRBvy14VtbW2ZMWNG7rnnnpx11lkney4AgBFtyA8j7erqyrx58wQWAMA7GHJk/fIv/3J27tx5MmcBADhtDDmyVqxYkS1btuTv//7vT+Y8AACnhSGfybr22mtTrVazb9++jB8/Puecc04aG/s3W0NDQx555JGTMigAwEgy5N8unDRpUiZNmpT3ve99J3MeAIDTgoeRAgAUMOQzWQAADG7IXxf+4Ac/OKbrLr/88qH+TwAAjFhD/rrw/e9/fxoaGt71uueff34obw8AMKIN+ZOsBx54YMBab29vdu3alYcffjh9fX259dZbT2g4AICRqsjB976+vtxwww1paWnJLbfccrLfHgCg7hU5+N7Y2Jhrrrkm3/jGN0q8PQBA3Sv224XVajXd3d2l3h4AoK4N+UzW7t2733G9q6srTz/9dDZs2JDLLrtsyIMBAIxkRX67sFarZe7cufnzP//zXHDBBSc0IADASDTkyPq7v/u7AZHV0NCQSqWSCy+8MJdccslJGRAAYCTyZ3UAAAoY8pmst3vppZeya9euJMn555/vUywA4Ix3QpH1+OOPZ/Xq1UcC6y0XXHBBbrvttvzWb/3WCQ0HADBSDfnrwqeeeiq///u/n/POOy8f//jHM2PGjCTJjh078vDDD2f37t2566670tbWdlIHBgAYCYYcWQsXLkxPT0/++q//OuPHj+/32s9//vPccMMNGTt2bL7+9a+flEEBAEaSIT+M9IUXXshHP/rRAYGVJOPHj8/HPvaxvPDCCyc0HADASDXkyBo7dmyq1eqgr1er1YwdO3aobw8AMKINObKuuOKKPPDAA3n22WcHvPajH/0oDz74YFpaWk5oOACAkWrIZ7JeeeWVLFq0KPv378+cOXNy8cUXJ0l27tyZf/u3f8uUKVOyadMmT3wHAM5IJ/Qw0ldffTV33313tm7deuRvGZ533nn5jd/4jXz2s5/NlClTTtqgAAAjyZAj64033sihQ4cyceLEd3z9wIEDGTduXEaPPinPOwUAGFGGfCbr9ttvz6JFiwZ9/ROf+ERWr1491LcHABjRhhxZ3/3udzNv3rxBX583b162bt061LcHABjRhhxZe/fuzfTp0wd9fdq0admzZ89Q3x4AYEQbcmRNmjQpO3fuHPT1HTt2DHpeCwDgdDfkyPr1X//1bNq0Kf/5n/854LXnnnsuDz/8sL9bCACcsYb824V79uzJggULsn///nzoQx/KJZdckiR58cUX8+STT2by5Mn5xje+kXPOOeekDgwAMBKc0HOy9u7dmzvvvDP/+I//mAMHDiRJJk6cmN/+7d/O0qVLj3pmCwDgdHZCkfWWWq2W/fv3J0kmT56choaGEx4MAGAkOymRBQBAf0M++A4AwOBEFgBAASILAKAAkQUAUIDIAgAoQGQBABQgsgAAChBZAAAFiCwAgAJEFgBAASILAKAAkQUAUIDIAgAooO4ia8eOHbnpppsyd+7ctLa2Zs2aNenp6Tmu9/jqV7+aWbNmpaOjo9CUAABHN3q4B3i7arWa9vb2XHTRRVm3bl327NmT1atX59ChQ1m+fPkxvce+ffvyla98JVOmTCk8LQDA4OoqsjZt2pSDBw9m/fr1mTRpUpKkt7c3K1euTEdHR6ZPn/6u73HHHXfkQx/6UHbv3l14WgCAwdXV14Vbt25NS0vLkcBKkvnz56evry/btm171/1PP/10Hn/88dx6660FpwQAeHd1FVmdnZ1pbm7ut1apVDJ16tR0dnYedW9vb29WrVqV3/u938u0adNKjgkA8K7qKrK6urpSqVQGrDc1NaVarR5179e+9rW89tprWbx4caHpAACOXV2dyRqqV199NWvXrs2XvvSljBkzZrjHAQCor8iqVCrp7u4esF6tVtPU1DTovr/4i7/IrFmzctlll6WrqytJ8sYbb+SNN95IV1dXxo8fn9Gj6+pWAYDTXF2VR3Nz84CzV93d3dm3b9+As1pvt3PnzvzgBz/I5ZdfPuC1yy+/PPfee2/a2tpO+rwAAIOpq8hqa2vLXXfd1e9s1ubNm9PY2JjW1tZB9/3pn/7pkU+w3vLFL34x48aNy7JlyzJr1qyicwMA/F91FVmLFi3Kgw8+mCVLlqSjoyN79uzJmjVrsmjRon7PyGpvb8/u3buzZcuWJMns2bMHvFelUsn48eNzxRVXnLL5AQDeUle/XdjU1JSNGzdm1KhRWbJkSe68884sWLAgt912W7/r+vr60tvbO0xTAgC8u4ZarVYb7iEAAE43dfVJFgDA6UJkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKEBkAQAUILIAAAoQWQAABYgsAIACRBYAQAEiCwCgAJEFAFCAyAIAKGD0cA/wf+3YsSO33357nn322UyYMCHXXXdd/uiP/ihjxowZdM/evXvz1a9+Ndu2bct//dd/5T3veU8uv/zyLFu2LOeff/4pnB4A4E11FVnVajXt7e256KKLsm7duuzZsyerV6/OoUOHsnz58kH3Pffcc9myZUt+93d/N7/yK7+Sn/70p/mrv/qrXH/99fn2t7+dyZMnn8K7AACos8jatGlTDh48mPXr12fSpElJkt7e3qxcuTIdHR2ZPn36O+771V/91Tz22GMZPfp/b+fSSy/NVVddlW9+85u5+eabT8X4AABH1NWZrK1bt6alpeVIYCXJ/Pnz09fXl23btg26r1Kp9AusJDnnnHMyefLk7N27t9S4AACDqqvI6uzsTHNzc7+1SqWSqVOnprOz87jea+fOnXn11VczY8aMkzkiAMAxqavI6urqSqVSGbDe1NSUarV6zO9Tq9Vy++23Z9q0abnmmmtO5ogAAMekrs5knSzr1q3LP//zP+e+++7L+PHjh3scAOAMVFeRValU0t3dPWC9Wq2mqanpmN7j4Ycfzle+8pV84QtfSEtLy8keEQDgmNTV14XNzc0Dzl51d3dn3759A85qvZMtW7ZkxYoV+dznPpcFCxaUGhMA4F3VVWS1tbVl+/bt6erqOrK2efPmNDY2prW19ah7v//972fZsmW5/vrrs2TJktKjAgAcVUOtVqsN9xBvqVarueaaa3LxxReno6PjyMNIr7322n4PI21vb8/u3buzZcuWJG8+JX7hwoU599xzs3LlyjQ2/m87Tp48ORdeeOEpvxcA4MxWV2eympqasnHjxqxatSpLlizJhAkTsmDBgixdurTfdX19fent7T3y7x/96Efp7u5Od3d3PvGJT/S79mMf+1hWr159SuYHAHhLXX2SBQBwuqirM1kAAKcLkQUAUIDIAgAoQGQBABQgsgAAChBZAAAFiCwAgAJEFgBAASILAKAAkQUAUIDIAgAoQGQBABQgsgAAChBZAAAFiCwAgAJEFgBAASILAKAAkQUAUIDIAgAoQGQBABQgsgAAChBZAAAFiCwAgAJEFgBAASILAKAAkQUAUIDIAgAoQGQBABQgsgAAChBZAAAFiCwAgAJEFgBAASILAKAAkQUAUIDIAgAoQGQBABQgsgAAChBZAAAFiCwAgAJEFgBAASILAKAAkQUAUIDIAgAoQGQBABQgsgAAChBZAAAFiCwAgAJEFgBAASILAKAAkQUAUIDIAgAoQGQBABQgsgAAChBZAAAFiCwAgAJEFgBAASILAKAAkQUAUEDdRdaOHTty0003Ze7cuWltbc2aNWvS09PzrvtqtVruueeeXHXVVZkzZ04WLlyYH/7wh+UHBgB4B3UVWdVqNe3t7Xn99dezbt26LF26NA8//HBWr179rnvvvfferF27NosXL87dd9+dqVOn5uabb84rr7xyCiYHAOivoVar1YZ7iLfcfffdueuuu/Lkk09m0qRJSZKvf/3rWblyZZ588slMnz79HfcdPnw4V155ZW688cYsW7YsSdLT05MPf/jDaWtry4oVK07RHQAAvKmuPsnaunVrWlpajgRWksyfPz99fX3Ztm3boPueeeaZHDhwIPPnzz+yNmbMmFx99dXZunVryZEBAN5RXUVWZ2dnmpub+61VKpVMnTo1nZ2dR92XZMDeGTNmZPfu3Tl06NDJHxYA4CjqKrK6urpSqVQGrDc1NaVarR5135gxYzJ27Nh+65VKJbVa7ah7AQBKqKvIAgA4XdRVZFUqlXR3dw9Yr1araWpqOuq+np6eHD58uN96V1dXGhoajroXAKCEuoqs5ubmAWevuru7s2/fvgHnrf7vviTZuXNnv/XOzs6cd955GTdu3MkfFgDgKOoqstra2rJ9+/Z0dXUdWdu8eXMaGxvT2to66L5LL700EydOzGOPPXZk7fXXX893vvOdtLW1FZ0ZAOCdjB7uAd5u0aJFefDBB7NkyZJ0dHRkz549WbNmTRYtWtTvGVnt7e3ZvXt3tmzZkiQZO3ZsOjo6sm7dukyePDkzZ87MQw89lJ/97Gf59Kc/PVy3AwCcweoqspqamrJx48asWrUqS5YsyYQJE7JgwYIsXbq033V9fX3p7e3tt/aZz3wmtVot999/f/bv35/Zs2dnw4YNee9733sqbwEAIEmdPfEdAOB0UVdnsgAAThciCwCgAJEFAFCAyAIAKEBkAQAUILIAAAqoq+dknUpz5swZ8LcOAQAGs2HDhnzwgx885uvP2E+yBBYAcDyOJ7CSMziyvvWtb2XevHnDPQYAMEIcOHDguK4/YyPr/e9/f9auXZsxY8YM9ygAwAjw5S9/+biuP2MjCwDgeDz11FPHdf0ZH1mVSmW4RwAARoCurq7juv6Mj6xt27YN9wgAwAhwvL80d8ZH1uLFi4d7BABgBOjp6Tmu68/4yHrmmWeGewQAYATo6+s7ruvP6Mjq7Oz0vCwA4JjMnDnzuK5vqNVqtUKz1LWVK1fma1/72nCPAQCMEM8//3waG4/986kz9pOsb33rW8M9AgAwghxPYCVn8CdZAAAlnbGfZAEAlCSyAAAKEFkAAAWILACAAkQWAEABIgsAoACRBQBQgMgCAChAZAEAFCCyAAAKEFkAAAX8P3xgP/M7DFSlAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "sns.countplot(y_sampled)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Orh93e2aVOkf"
      },
      "source": [
        "# Model *Building*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hSe5RU5L9t7c"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.metrics  import roc_auc_score,accuracy_score\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from xgboost import XGBClassifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 141
        },
        "id": "re72TbaNEI8u",
        "outputId": "2d39e163-63c3-460b-a5e1-7eec88bce390"
      },
      "outputs": [
        {
          "ename": "NameError",
          "evalue": "name 'x_sampled' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-39-0bbea42a12dd>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mx_sampled\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'x_sampled' is not defined"
          ]
        }
      ],
      "source": [
        "x_sampled.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Q2VD6WBeiRP",
        "outputId": "f4af21cf-22b9-4737-fe75-f5aeda4201c6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "age                          0\n",
              "sex                          0\n",
              "on_thyroxine                 0\n",
              "query_on_thyroxine           0\n",
              "on_antithyroid_medication    0\n",
              "sick                         0\n",
              "pregnant                     0\n",
              "thyroid_surgery              0\n",
              "I131_treatment               0\n",
              "query_hypothyroid            0\n",
              "query_hyperthyroid           0\n",
              "lithium                      0\n",
              "goitre                       0\n",
              "tumor                        0\n",
              "hypopituitary                0\n",
              "psych                        0\n",
              "T3                           0\n",
              "TT4                          0\n",
              "T4U                          0\n",
              "FTI                          0\n",
              "referral_source_STMW         0\n",
              "referral_source_SVHC         0\n",
              "referral_source_SVHD         0\n",
              "referral_source_SVI          0\n",
              "referral_source_other        0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 41,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_sampled.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hYjD4gsSFsIq",
        "outputId": "84275499-aaef-4a3c-ab01-e7e02cdcfa49"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0        1.0\n",
              "1        1.0\n",
              "2        1.0\n",
              "3        1.0\n",
              "4        1.0\n",
              "        ... \n",
              "13919    3.0\n",
              "13920    3.0\n",
              "13921    3.0\n",
              "13922    3.0\n",
              "13923    3.0\n",
              "Name: Class, Length: 13924, dtype: float64"
            ]
          },
          "execution_count": 42,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_sampled"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UVPqeB1jYXdJ"
      },
      "source": [
        "### Clustering of the data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qld4X9j2VbxO"
      },
      "outputs": [],
      "source": [
        "def elbow_plot(data):\n",
        "        \"\"\"\n",
        "                        Method Name: elbow_plot\n",
        "                        Description: This method saves the plot to decide the optimum number of clusters to the file.\n",
        "                        Output: A picture saved to the directory\n",
        "                        On Failure: Raise Exception\n",
        "\n",
        "        \"\"\"\n",
        "\n",
        "        wcss=[] # initializing an empty list\n",
        "        try:\n",
        "            for i in range (1,11):\n",
        "                kmeans=KMeans(n_clusters=i,init='k-means++',random_state=42) # initializing the KMeans object\n",
        "                kmeans.fit(data) # fitting the data to the KMeans Algorithm\n",
        "                wcss.append(kmeans.inertia_)\n",
        "            plt.plot(range(1,11),wcss) # creating the graph between WCSS and the number of clusters\n",
        "            plt.title('The Elbow Method')\n",
        "            plt.xlabel('Number of clusters')\n",
        "            plt.ylabel('WCSS')\n",
        "\n",
        "            plt.savefig('K-Means_Elbow.PNG') # saving the elbow plot locally\n",
        "            # finding the value of the optimum cluster programmatically\n",
        "            kn = KneeLocator(range(1, 11), wcss, curve='convex', direction='decreasing')\n",
        "            print('The optimum number of clusters is: '+str(kn.knee)+' . Exited the elbow_plot method of the KMeansClustering class')\n",
        "            return kn.knee\n",
        "\n",
        "        except Exception as e:\n",
        "          print(e)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 882
        },
        "id": "4V_PviqrZ4tQ",
        "outputId": "77663e70-81aa-44c5-a3b1-53d26860709f"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The optimum number of clusters is: 3 . Exited the elbow_plot method of the KMeansClustering class\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "execution_count": 44,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "elbow_plot(x_sampled)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N_ikANVlaDf7"
      },
      "outputs": [],
      "source": [
        "def create_clusters(data,number_of_clusters):\n",
        "        \"\"\"\n",
        "                                Method Name: create_clusters\n",
        "                                Description: Create a new dataframe consisting of the cluster information.\n",
        "                                Output: A datframe with cluster column\n",
        "                                On Failure: Raise Exception\n",
        "\n",
        "      \"\"\"\n",
        "\n",
        "        try:\n",
        "            kmeans = KMeans(n_clusters=number_of_clusters, init='k-means++', random_state=42)\n",
        "\n",
        "            y_kmeans=kmeans.fit_predict(data) #  divide data into clusters\n",
        "\n",
        "\n",
        "            data['Cluster']=y_kmeans  # create a new column in dataset for storing the cluster information\n",
        "            print('succesfully created '+str(f\"{number_of_clusters}\")+ ' clusters. Exited the create_clusters method of the KMeansClustering class')\n",
        "            return data\n",
        "\n",
        "        except Exception as e:\n",
        "          print(e)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CpTeZHc6cd1W",
        "outputId": "005d3190-81d4-4ad5-9267-1acb9fec47d7"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "succesfully created 3 clusters. Exited the create_clusters method of the KMeansClustering class\n"
          ]
        }
      ],
      "source": [
        "#Creating clusters\n",
        "x_sampled = create_clusters(x_sampled,3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "dFq0a4DDoIWW",
        "outputId": "0bba7940-66b0-43f5-bdbb-3eaba40f6997"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_sampled"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-f6e8920f-3435-4b07-9e53-7899c626dddd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "      <th>Cluster</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>42.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>176.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13919</th>\n",
              "      <td>42.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13920</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13921</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13922</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13923</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>13924 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6e8920f-3435-4b07-9e53-7899c626dddd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f6e8920f-3435-4b07-9e53-7899c626dddd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f6e8920f-3435-4b07-9e53-7899c626dddd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-956dc3fe-e0e3-4520-a2e8-f0e893b467a9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-956dc3fe-e0e3-4520-a2e8-f0e893b467a9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-956dc3fe-e0e3-4520-a2e8-f0e893b467a9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f59768a5-aea8-4152-aaa2-521cfdd0e93d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('x_sampled')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f59768a5-aea8-4152-aaa2-521cfdd0e93d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('x_sampled');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "        age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  \\\n",
              "0      42.0  0.0           0.0                 0.0                        0.0   \n",
              "1      24.0  0.0           0.0                 0.0                        0.0   \n",
              "2      47.0  1.0           0.0                 0.0                        0.0   \n",
              "3      71.0  0.0           1.0                 0.0                        0.0   \n",
              "4      71.0  0.0           0.0                 0.0                        0.0   \n",
              "...     ...  ...           ...                 ...                        ...   \n",
              "13919  42.0  1.0           0.0                 0.0                        0.0   \n",
              "13920  47.0  0.0           0.0                 0.0                        0.0   \n",
              "13921  47.0  0.0           0.0                 0.0                        0.0   \n",
              "13922  47.0  0.0           0.0                 0.0                        0.0   \n",
              "13923  47.0  0.0           0.0                 0.0                        0.0   \n",
              "\n",
              "       sick  pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  \\\n",
              "0       0.0       0.0              0.0             0.0                0.0   \n",
              "1       0.0       0.0              0.0             0.0                0.0   \n",
              "2       0.0       0.0              0.0             0.0                0.0   \n",
              "3       0.0       0.0              0.0             0.0                0.0   \n",
              "4       0.0       0.0              0.0             0.0                0.0   \n",
              "...     ...       ...              ...             ...                ...   \n",
              "13919   0.0       0.0              0.0             0.0                1.0   \n",
              "13920   0.0       0.0              0.0             0.0                0.0   \n",
              "13921   0.0       0.0              0.0             0.0                0.0   \n",
              "13922   0.0       0.0              0.0             0.0                0.0   \n",
              "13923   0.0       0.0              0.0             0.0                0.0   \n",
              "\n",
              "       ...   T3    TT4  T4U    FTI  referral_source_STMW  \\\n",
              "0      ...  3.0  126.0  2.0  110.0                   0.0   \n",
              "1      ...  3.0  103.0  2.0  109.0                   0.0   \n",
              "2      ...  3.0  110.0  2.0  121.0                   0.0   \n",
              "3      ...  3.0  176.0  2.0  178.0                   0.0   \n",
              "4      ...  2.0   62.0  2.0   71.0                   0.0   \n",
              "...    ...  ...    ...  ...    ...                   ...   \n",
              "13919  ...  3.0   23.0  2.0   58.0                   0.0   \n",
              "13920  ...  2.0   49.0  2.0   55.0                   0.0   \n",
              "13921  ...  2.0   49.0  2.0   55.0                   0.0   \n",
              "13922  ...  2.0   49.0  2.0   55.0                   0.0   \n",
              "13923  ...  2.0   49.0  2.0   55.0                   0.0   \n",
              "\n",
              "       referral_source_SVHC  referral_source_SVHD  referral_source_SVI  \\\n",
              "0                       1.0                   0.0                  0.0   \n",
              "1                       0.0                   0.0                  0.0   \n",
              "2                       0.0                   0.0                  0.0   \n",
              "3                       0.0                   0.0                  0.0   \n",
              "4                       0.0                   0.0                  1.0   \n",
              "...                     ...                   ...                  ...   \n",
              "13919                   0.0                   0.0                  0.0   \n",
              "13920                   0.0                   0.0                  0.0   \n",
              "13921                   0.0                   0.0                  0.0   \n",
              "13922                   0.0                   0.0                  0.0   \n",
              "13923                   0.0                   0.0                  0.0   \n",
              "\n",
              "       referral_source_other  Cluster  \n",
              "0                        0.0        0  \n",
              "1                        1.0        2  \n",
              "2                        1.0        0  \n",
              "3                        1.0        0  \n",
              "4                        0.0        2  \n",
              "...                      ...      ...  \n",
              "13919                    1.0        1  \n",
              "13920                    1.0        1  \n",
              "13921                    1.0        1  \n",
              "13922                    1.0        1  \n",
              "13923                    1.0        1  \n",
              "\n",
              "[13924 rows x 26 columns]"
            ]
          },
          "execution_count": 47,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_sampled"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LUv6idjvpAYC"
      },
      "outputs": [],
      "source": [
        "#Adding data labels into x\n",
        "x_sampled['Labels']=y_sampled"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "LxhWBrTfpZgo",
        "outputId": "d310a5ef-af3d-4c60-8fc9-1e2d17f988e6"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_sampled"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-c4bca481-00fe-42d8-98cc-cba769fb21df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "      <th>Cluster</th>\n",
              "      <th>Labels</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>42.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>126.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>103.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>110.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>176.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>62.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4bca481-00fe-42d8-98cc-cba769fb21df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4bca481-00fe-42d8-98cc-cba769fb21df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4bca481-00fe-42d8-98cc-cba769fb21df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e8c90550-b454-40e7-9a94-f68f4802194a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8c90550-b454-40e7-9a94-f68f4802194a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e8c90550-b454-40e7-9a94-f68f4802194a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  \\\n",
              "0  42.0  0.0           0.0                 0.0                        0.0   \n",
              "1  24.0  0.0           0.0                 0.0                        0.0   \n",
              "2  47.0  1.0           0.0                 0.0                        0.0   \n",
              "3  71.0  0.0           1.0                 0.0                        0.0   \n",
              "4  71.0  0.0           0.0                 0.0                        0.0   \n",
              "\n",
              "   sick  pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  ...  \\\n",
              "0   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "1   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "2   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "3   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "4   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "\n",
              "     TT4  T4U    FTI  referral_source_STMW  referral_source_SVHC  \\\n",
              "0  126.0  2.0  110.0                   0.0                   1.0   \n",
              "1  103.0  2.0  109.0                   0.0                   0.0   \n",
              "2  110.0  2.0  121.0                   0.0                   0.0   \n",
              "3  176.0  2.0  178.0                   0.0                   0.0   \n",
              "4   62.0  2.0   71.0                   0.0                   0.0   \n",
              "\n",
              "   referral_source_SVHD  referral_source_SVI  referral_source_other  Cluster  \\\n",
              "0                   0.0                  0.0                    0.0        0   \n",
              "1                   0.0                  0.0                    1.0        2   \n",
              "2                   0.0                  0.0                    1.0        0   \n",
              "3                   0.0                  0.0                    1.0        0   \n",
              "4                   0.0                  1.0                    0.0        2   \n",
              "\n",
              "   Labels  \n",
              "0     1.0  \n",
              "1     1.0  \n",
              "2     1.0  \n",
              "3     1.0  \n",
              "4     1.0  \n",
              "\n",
              "[5 rows x 27 columns]"
            ]
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_sampled.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5tFzJKR6pboQ",
        "outputId": "08e09002-b769-40f4-c8f5-890491fd2bba"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0, 2, 1], dtype=int32)"
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "list_of_clusters=x_sampled['Cluster'].unique()\n",
        "list_of_clusters"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YQOiL1zqsDFU"
      },
      "source": [
        "### Model on Cluster == 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mBNbOxvqpqBt"
      },
      "outputs": [],
      "source": [
        "cluster_data=x_sampled[x_sampled['Cluster']==1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "L_id9xdMqSdM",
        "outputId": "94eada29-56af-49d6-907a-e17c124b4868"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cluster_data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-ebc12c2d-c39f-43ba-9563-0d82a766f75d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "      <th>Cluster</th>\n",
              "      <th>Labels</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>45.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>40.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>12.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>89</th>\n",
              "      <td>50.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>33.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>61.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>91</th>\n",
              "      <td>81.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>116</th>\n",
              "      <td>51.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>33.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13919</th>\n",
              "      <td>42.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>23.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13920</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13921</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13922</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13923</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6792 rows × 27 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ebc12c2d-c39f-43ba-9563-0d82a766f75d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ebc12c2d-c39f-43ba-9563-0d82a766f75d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ebc12c2d-c39f-43ba-9563-0d82a766f75d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cb77b297-a547-49db-92a6-a55208e00f21\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cb77b297-a547-49db-92a6-a55208e00f21')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cb77b297-a547-49db-92a6-a55208e00f21 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_71353b2b-0aa3-4288-ad08-86291ea0d009\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cluster_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_71353b2b-0aa3-4288-ad08-86291ea0d009 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cluster_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "        age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  \\\n",
              "40     45.0  1.0           0.0                 0.0                        0.0   \n",
              "88     40.0  0.0           0.0                 0.0                        0.0   \n",
              "89     50.0  0.0           0.0                 0.0                        0.0   \n",
              "91     81.0  1.0           0.0                 0.0                        0.0   \n",
              "116    51.0  1.0           0.0                 0.0                        0.0   \n",
              "...     ...  ...           ...                 ...                        ...   \n",
              "13919  42.0  1.0           0.0                 0.0                        0.0   \n",
              "13920  47.0  0.0           0.0                 0.0                        0.0   \n",
              "13921  47.0  0.0           0.0                 0.0                        0.0   \n",
              "13922  47.0  0.0           0.0                 0.0                        0.0   \n",
              "13923  47.0  0.0           0.0                 0.0                        0.0   \n",
              "\n",
              "       sick  pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  \\\n",
              "40      0.0       0.0              0.0             0.0                0.0   \n",
              "88      0.0       0.0              0.0             0.0                0.0   \n",
              "89      0.0       0.0              0.0             0.0                0.0   \n",
              "91      0.0       0.0              0.0             0.0                0.0   \n",
              "116     0.0       0.0              0.0             0.0                0.0   \n",
              "...     ...       ...              ...             ...                ...   \n",
              "13919   0.0       0.0              0.0             0.0                1.0   \n",
              "13920   0.0       0.0              0.0             0.0                0.0   \n",
              "13921   0.0       0.0              0.0             0.0                0.0   \n",
              "13922   0.0       0.0              0.0             0.0                0.0   \n",
              "13923   0.0       0.0              0.0             0.0                0.0   \n",
              "\n",
              "       ...   TT4  T4U   FTI  referral_source_STMW  referral_source_SVHC  \\\n",
              "40     ...  40.0  2.0  34.0                   0.0                   0.0   \n",
              "88     ...  12.0  2.0  10.0                   0.0                   0.0   \n",
              "89     ...  33.0  2.0  61.0                   0.0                   0.0   \n",
              "91     ...  40.0  2.0  42.0                   0.0                   0.0   \n",
              "116    ...  33.0  2.0  29.0                   0.0                   0.0   \n",
              "...    ...   ...  ...   ...                   ...                   ...   \n",
              "13919  ...  23.0  2.0  58.0                   0.0                   0.0   \n",
              "13920  ...  49.0  2.0  55.0                   0.0                   0.0   \n",
              "13921  ...  49.0  2.0  55.0                   0.0                   0.0   \n",
              "13922  ...  49.0  2.0  55.0                   0.0                   0.0   \n",
              "13923  ...  49.0  2.0  55.0                   0.0                   0.0   \n",
              "\n",
              "       referral_source_SVHD  referral_source_SVI  referral_source_other  \\\n",
              "40                      0.0                  1.0                    0.0   \n",
              "88                      0.0                  0.0                    1.0   \n",
              "89                      0.0                  1.0                    0.0   \n",
              "91                      0.0                  1.0                    0.0   \n",
              "116                     0.0                  0.0                    1.0   \n",
              "...                     ...                  ...                    ...   \n",
              "13919                   0.0                  0.0                    1.0   \n",
              "13920                   0.0                  0.0                    1.0   \n",
              "13921                   0.0                  0.0                    1.0   \n",
              "13922                   0.0                  0.0                    1.0   \n",
              "13923                   0.0                  0.0                    1.0   \n",
              "\n",
              "       Cluster  Labels  \n",
              "40           1     2.0  \n",
              "88           1     2.0  \n",
              "89           1     1.0  \n",
              "91           1     1.0  \n",
              "116          1     2.0  \n",
              "...        ...     ...  \n",
              "13919        1     3.0  \n",
              "13920        1     3.0  \n",
              "13921        1     3.0  \n",
              "13922        1     3.0  \n",
              "13923        1     3.0  \n",
              "\n",
              "[6792 rows x 27 columns]"
            ]
          },
          "execution_count": 52,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cluster_data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qHO-gTukqV4Y"
      },
      "outputs": [],
      "source": [
        "cluster_features=cluster_data.drop(['Labels','Cluster'],axis=1)\n",
        "cluster_label= cluster_data['Labels']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "P5tmXW7qqssB"
      },
      "outputs": [],
      "source": [
        "# splitting the data into training and test set for each cluster one by one\n",
        "x_train, x_test, y_train, y_test = train_test_split(cluster_features, cluster_label, test_size=1 / 3, random_state=355)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BQpRfIvZeRBc"
      },
      "outputs": [],
      "source": [
        "def get_best_params_for_random_forest(train_x,train_y):\n",
        "        \"\"\"\n",
        "                                Method Name: get_best_params_for_random_forest\n",
        "                                Description: get the parameters for Random Forest Algorithm which give the best accuracy.\n",
        "                                             Use Hyper Parameter Tuning.\n",
        "                                Output: The model with the best parameters\n",
        "                                On Failure: Raise Exception\n",
        "\n",
        "        \"\"\"\n",
        "        print('Entered the get_best_params_for_random_forest method of the Model_Finder class')\n",
        "        try:\n",
        "            # initializing with different combination of parameters\n",
        "            param_grid = {\"n_estimators\": [10, 50, 100, 130], \"criterion\": ['gini', 'entropy'],\n",
        "                               \"max_depth\": range(2, 4, 1), \"max_features\": ['auto', 'log2']}\n",
        "\n",
        "            clf = RandomForestClassifier()\n",
        "\n",
        "            #Creating an object of the Grid Search class\n",
        "            grid = GridSearchCV(estimator=clf, param_grid=param_grid, cv=5,  verbose=3)\n",
        "            #finding the best parameters\n",
        "            grid.fit(train_x, train_y)\n",
        "\n",
        "            #extracting the best parameters\n",
        "            criterion = grid.best_params_['criterion']\n",
        "            max_depth = grid.best_params_['max_depth']\n",
        "            max_features = grid.best_params_['max_features']\n",
        "            n_estimators = grid.best_params_['n_estimators']\n",
        "\n",
        "            #creating a new model with the best parameters\n",
        "            clf = RandomForestClassifier(n_estimators=n_estimators, criterion=criterion,\n",
        "                                              max_depth=max_depth, max_features=max_features)\n",
        "            # training the mew model\n",
        "            clf.fit(train_x, train_y)\n",
        "\n",
        "            print('Random Forest best params: '+str(f\"{grid.best_params_}\")+'. Exited the get_best_params_for_random_forest method of the Model_Finder class')\n",
        "\n",
        "            return clf\n",
        "        except Exception as e:\n",
        "          raise Exception()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PL6G8iK_pUdz"
      },
      "outputs": [],
      "source": [
        "def get_best_params_for_KNN(train_x, train_y):\n",
        "        \"\"\"\n",
        "                                                Method Name: get_best_params_for_KNN\n",
        "                                                Description: get the parameters for KNN Algorithm which give the best accuracy.\n",
        "                                                             Use Hyper Parameter Tuning.\n",
        "                                                Output: The model with the best parameters\n",
        "                                                On Failure: Raise Exception\n",
        "\n",
        "        \"\"\"\n",
        "        print('Entered the get_best_params_for_Ensembled_KNN method of the Model_Finder class')\n",
        "        try:\n",
        "            #initializing with different combination of parameters\n",
        "            param_grid_knn = {\n",
        "                'algorithm' : ['ball_tree', 'kd_tree', 'brute'],\n",
        "                'leaf_size' : [10,17,24,28,30,35],\n",
        "                'n_neighbors':[4,5,8,10,11],\n",
        "                'p':[1,2]\n",
        "            }\n",
        "\n",
        "            knn = KNeighborsClassifier()\n",
        "            #Creating an object of the Grid Search class\n",
        "            grid = GridSearchCV(knn, param_grid_knn, verbose=3,cv=5)\n",
        "            # finding the best parameters\n",
        "            grid.fit(train_x, train_y)\n",
        "\n",
        "            # extracting the best parameters\n",
        "            algorithm =grid.best_params_['algorithm']\n",
        "            leaf_size = grid.best_params_['leaf_size']\n",
        "            n_neighbors = grid.best_params_['n_neighbors']\n",
        "            p  = grid.best_params_['p']\n",
        "\n",
        "            # creating a new model with the best parameters\n",
        "            knn = KNeighborsClassifier(algorithm=algorithm, leaf_size=leaf_size, n_neighbors=n_neighbors,p=p,n_jobs=-1)\n",
        "            # training the mew model\n",
        "            knn.fit(train_x, train_y)\n",
        "            print('KNN best params: ' + str(f\"{grid.best_params_}\") + '. Exited the KNN method of the Model_Finder class')\n",
        "            return knn\n",
        "\n",
        "        except Exception as e:\n",
        "            raise Exception()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zGNd6SLq9S_l",
        "outputId": "86d7f1ee-d24c-4b98-f783-1d5b013a7aaf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Entered the get_best_params_for_random_forest method of the Model_Finder class\n",
            "Fitting 5 folds for each of 32 candidates, totalling 160 fits\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.921 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.930 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.819 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.966 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.950 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.953 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.968 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.973 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.970 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.961 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.956 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.962 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.973 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.967 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.969 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.971 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.973 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.958 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.945 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.961 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.933 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.969 total time=   0.0s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.948 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.971 total time=   0.1s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.921 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.973 total time=   0.1s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.977 total time=   0.1s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.958 total time=   0.2s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.953 total time=   0.2s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.972 total time=   0.3s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.945 total time=   0.3s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.970 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.969 total time=   0.4s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.971 total time=   0.4s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.962 total time=   0.4s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.973 total time=   0.4s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.967 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.979 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.979 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.972 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.973 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.970 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.971 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.973 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.977 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.971 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.973 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.977 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.971 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.973 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.954 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.979 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.966 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.976 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.980 total time=   0.0s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.971 total time=   0.1s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.973 total time=   0.1s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.977 total time=   0.1s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.972 total time=   0.2s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.974 total time=   0.2s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.972 total time=   0.2s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.973 total time=   0.2s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.977 total time=   0.2s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.972 total time=   0.3s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.971 total time=   0.3s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.972 total time=   0.3s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.973 total time=   0.3s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.892 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.903 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.943 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.939 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.962 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.965 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.973 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.970 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.965 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.962 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.977 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.971 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.962 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.973 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.914 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.967 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.935 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.955 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.962 total time=   0.0s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.956 total time=   0.2s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.965 total time=   0.2s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.972 total time=   0.2s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.969 total time=   0.2s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.956 total time=   0.2s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.969 total time=   0.3s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.971 total time=   0.3s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.939 total time=   0.3s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.973 total time=   0.3s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.951 total time=   0.2s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.929 total time=   0.3s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.950 total time=   0.3s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.966 total time=   0.3s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.973 total time=   0.3s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.968 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.954 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.977 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.979 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.973 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.979 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.971 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.979 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.976 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.977 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.971 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.973 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.977 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.971 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.973 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.974 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.971 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.972 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.972 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.968 total time=   0.0s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.971 total time=   0.1s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.965 total time=   0.1s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.977 total time=   0.1s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.972 total time=   0.2s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.971 total time=   0.2s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.972 total time=   0.2s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.973 total time=   0.2s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.977 total time=   0.2s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.972 total time=   0.3s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.971 total time=   0.3s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.972 total time=   0.3s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.973 total time=   0.3s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.977 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Forest best params: {'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto', 'n_estimators': 50}. Exited the get_best_params_for_random_forest method of the Model_Finder class\n"
          ]
        }
      ],
      "source": [
        "random_forest_classifier = get_best_params_for_random_forest(x_train,y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0lR9rMiz9gxF",
        "outputId": "fbc0de9c-6c80-4947-9324-9a2564c4901c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Entered the get_best_params_for_Ensembled_KNN method of the Model_Finder class\n",
            "Fitting 5 folds for each of 180 candidates, totalling 900 fits\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.987 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.992 total time=   0.3s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.4s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.4s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.994 total time=   0.4s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.4s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.4s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.994 total time=   0.3s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.4s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.994 total time=   0.3s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.987 total time=   0.3s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.996 total time=   0.5s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.992 total time=   0.4s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.4s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.993 total time=   0.4s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.4s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.4s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.4s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.5s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.3s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.4s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.4s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.4s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.994 total time=   0.7s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.992 total time=   0.6s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.991 total time=   0.3s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.991 total time=   0.3s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.992 total time=   0.3s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.994 total time=   0.3s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.992 total time=   0.5s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.991 total time=   0.5s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.994 total time=   0.3s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.4s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.991 total time=   0.4s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.4s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.992 total time=   0.3s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.3s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.4s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.992 total time=   0.3s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.994 total time=   0.3s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.991 total time=   0.3s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "KNN best params: {'algorithm': 'ball_tree', 'leaf_size': 10, 'n_neighbors': 4, 'p': 1}. Exited the KNN method of the Model_Finder class\n"
          ]
        }
      ],
      "source": [
        "knn_classifier = get_best_params_for_KNN(x_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mBPS4Ath-54z"
      },
      "outputs": [],
      "source": [
        "def get_best_params_for_xgboost(train_x,train_y):\n",
        "   \"\"\"\n",
        "                                      Method Name: get_best_params_for_xgboost\n",
        "                                      Description: get the parameters for XGBoost Algorithm which give the best accuracy.\n",
        "                                      Use Hyper Parameter Tuning.\n",
        "\n",
        "                                      Output: The model with the best parameters\n",
        "                                      On Failure: Raise Exception\n",
        "\n",
        "   \"\"\"\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "   print('Entered the get_best_params_for_xgboost method of the Model_Finder class')\n",
        "   try:\n",
        "     # initializing with different combination of parameters\n",
        "     param_grid_xgboost = {\n",
        "\n",
        "                 'learning_rate': [0.5, 0.1, 0.01, 0.001],\n",
        "                 'max_depth': [3, 5, 10, 20],\n",
        "                 'n_estimators': [10, 50, 100, 200]\n",
        "\n",
        "             }\n",
        "     # Creating an object of the Grid Search class\n",
        "     grid= GridSearchCV(XGBClassifier(objective='binary:logistic'),param_grid_xgboost, verbose=3,cv=5)\n",
        "     # finding the best parameters\n",
        "     grid.fit(train_x, train_y)\n",
        "\n",
        "     # extracting the best parameters\n",
        "     learning_rate = grid.best_params_['learning_rate']\n",
        "     max_depth = grid.best_params_['max_depth']\n",
        "     n_estimators = grid.best_params_['n_estimators']\n",
        "\n",
        "     # creating a new model with the best parameters\n",
        "     xgb = XGBClassifier(learning_rate=1, max_depth=5, n_estimators=50)\n",
        "     # training the mew model\n",
        "     xgb.fit(train_x, train_y)\n",
        "     print('XGBoost best params: ' + str(f\"{grid.best_params_}\") + '. Exited the get_best_params_for_xgboost method of the Model_Finder class')\n",
        "\n",
        "\n",
        "     return xgb\n",
        "   except Exception as e:\n",
        "     raise Exception()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tsxmf5GsGf4W",
        "outputId": "bb4d4a74-005f-4222-fcf3-15aa423f386a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Entered the get_best_params_for_xgboost method of the Model_Finder class\n",
            "Fitting 5 folds for each of 64 candidates, totalling 320 fits\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=3, n_estimators=10;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=3, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=3, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=3, n_estimators=10;, score=0.998 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=3, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=3, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=3, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=3, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=3, n_estimators=50;, score=0.999 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=3, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=3, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=3, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=3, n_estimators=100;, score=0.997 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=3, n_estimators=100;, score=0.999 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=3, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=3, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=3, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=3, n_estimators=200;, score=0.997 total time=   0.3s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=3, n_estimators=200;, score=0.999 total time=   0.3s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=3, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=5, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=5, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=5, n_estimators=10;, score=0.998 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=5, n_estimators=10;, score=0.998 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=5, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=5, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=5, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=5, n_estimators=50;, score=0.999 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=5, n_estimators=50;, score=0.998 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=5, n_estimators=50;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=5, n_estimators=100;, score=0.996 total time=   1.1s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=5, n_estimators=100;, score=0.994 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=5, n_estimators=100;, score=0.999 total time=   0.5s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=5, n_estimators=100;, score=0.999 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=5, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=5, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=5, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=5, n_estimators=200;, score=0.999 total time=   0.3s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=5, n_estimators=200;, score=0.999 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=5, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=10, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=10, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=10, n_estimators=10;, score=0.998 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=10, n_estimators=10;, score=0.998 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=10, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=10, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=10, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=10, n_estimators=50;, score=0.998 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=10, n_estimators=50;, score=0.998 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=10, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=10, n_estimators=100;, score=0.997 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=10, n_estimators=100;, score=0.999 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=10, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=10, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=10, n_estimators=200;, score=0.998 total time=   0.3s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=10, n_estimators=200;, score=0.999 total time=   0.3s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=10, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=20, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=20, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=20, n_estimators=10;, score=0.998 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=20, n_estimators=10;, score=0.998 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=20, n_estimators=10;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=20, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=20, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=20, n_estimators=50;, score=0.998 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=20, n_estimators=50;, score=0.998 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=20, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=20, n_estimators=100;, score=0.997 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=20, n_estimators=100;, score=0.999 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.5, max_depth=20, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 2/5] END learning_rate=0.5, max_depth=20, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 3/5] END learning_rate=0.5, max_depth=20, n_estimators=200;, score=0.998 total time=   0.3s\n",
            "[CV 4/5] END learning_rate=0.5, max_depth=20, n_estimators=200;, score=0.999 total time=   0.3s\n",
            "[CV 5/5] END learning_rate=0.5, max_depth=20, n_estimators=200;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=3, n_estimators=10;, score=0.992 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=3, n_estimators=10;, score=0.991 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=3, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=3, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=3, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=3, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=3, n_estimators=50;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=3, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=3, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=3, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=3, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=3, n_estimators=100;, score=0.994 total time=   0.5s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=3, n_estimators=100;, score=0.997 total time=   1.0s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=3, n_estimators=100;, score=0.998 total time=   0.5s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=3, n_estimators=100;, score=0.996 total time=   0.5s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=3, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=3, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=3, n_estimators=200;, score=0.997 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=3, n_estimators=200;, score=0.999 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=3, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=5, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=5, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=5, n_estimators=10;, score=0.996 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=5, n_estimators=10;, score=0.997 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=5, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=5, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=5, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=5, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=5, n_estimators=50;, score=0.998 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=5, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=5, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=5, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=5, n_estimators=100;, score=0.997 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=5, n_estimators=100;, score=0.998 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=5, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=5, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=5, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=5, n_estimators=200;, score=0.998 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=5, n_estimators=200;, score=0.998 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=5, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=10, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=10, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=10, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=10, n_estimators=10;, score=0.998 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=10, n_estimators=10;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=10, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=10, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=10, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=10, n_estimators=50;, score=0.998 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=10, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=10, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=10, n_estimators=100;, score=0.997 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=10, n_estimators=100;, score=0.998 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=10, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=10, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=10, n_estimators=200;, score=0.998 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=10, n_estimators=200;, score=0.998 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=10, n_estimators=200;, score=0.996 total time=   0.6s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=20, n_estimators=10;, score=0.994 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=20, n_estimators=10;, score=0.994 total time=   0.3s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=20, n_estimators=10;, score=0.996 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=20, n_estimators=10;, score=0.998 total time=   0.5s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=20, n_estimators=10;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=20, n_estimators=50;, score=0.994 total time=   0.3s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=20, n_estimators=50;, score=0.994 total time=   0.5s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=20, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=20, n_estimators=50;, score=0.998 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=20, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=20, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=20, n_estimators=100;, score=0.997 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=20, n_estimators=100;, score=0.998 total time=   0.3s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.1, max_depth=20, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.1, max_depth=20, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.1, max_depth=20, n_estimators=200;, score=0.998 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.1, max_depth=20, n_estimators=200;, score=0.998 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.1, max_depth=20, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=3, n_estimators=10;, score=0.989 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=3, n_estimators=10;, score=0.991 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=3, n_estimators=10;, score=0.992 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=3, n_estimators=10;, score=0.992 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=3, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=3, n_estimators=50;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=3, n_estimators=50;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=3, n_estimators=50;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=3, n_estimators=50;, score=0.992 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=3, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=3, n_estimators=100;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=3, n_estimators=100;, score=0.992 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=3, n_estimators=100;, score=0.997 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=3, n_estimators=100;, score=0.993 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=3, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=3, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=3, n_estimators=200;, score=0.992 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=3, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=3, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=3, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=5, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=5, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=5, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=5, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=5, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=5, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=5, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=5, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=5, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=5, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=5, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=5, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=5, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=5, n_estimators=100;, score=0.997 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=5, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=5, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=5, n_estimators=200;, score=0.994 total time=   0.5s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=5, n_estimators=200;, score=0.996 total time=   1.7s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=5, n_estimators=200;, score=0.997 total time=   0.7s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=5, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=10, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=10, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=10, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=10, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=10, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=10, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=10, n_estimators=50;, score=0.993 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=10, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=10, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=10, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=10, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=10, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=10, n_estimators=100;, score=0.998 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=10, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=10, n_estimators=200;, score=0.994 total time=   0.5s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=10, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=10, n_estimators=200;, score=0.998 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=10, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=20, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=20, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=20, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=20, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=20, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=20, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=20, n_estimators=50;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=20, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=20, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=20, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=20, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=20, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=20, n_estimators=100;, score=0.998 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.01, max_depth=20, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.01, max_depth=20, n_estimators=200;, score=0.994 total time=   0.5s\n",
            "[CV 3/5] END learning_rate=0.01, max_depth=20, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.01, max_depth=20, n_estimators=200;, score=0.998 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.01, max_depth=20, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=3, n_estimators=10;, score=0.989 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=3, n_estimators=10;, score=0.991 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=3, n_estimators=10;, score=0.992 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=3, n_estimators=10;, score=0.992 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=3, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=3, n_estimators=50;, score=0.989 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=3, n_estimators=50;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=3, n_estimators=50;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=3, n_estimators=50;, score=0.992 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=3, n_estimators=50;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=3, n_estimators=100;, score=0.989 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=3, n_estimators=100;, score=0.991 total time=   0.5s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=3, n_estimators=100;, score=0.992 total time=   1.1s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=3, n_estimators=100;, score=0.992 total time=   0.6s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=3, n_estimators=100;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=3, n_estimators=200;, score=0.991 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=3, n_estimators=200;, score=0.991 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=3, n_estimators=200;, score=0.993 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=3, n_estimators=200;, score=0.992 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=3, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=5, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=5, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=5, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=5, n_estimators=10;, score=0.996 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=5, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=5, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=5, n_estimators=50;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=5, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=5, n_estimators=50;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=5, n_estimators=50;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=5, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=5, n_estimators=100;, score=0.993 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=5, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=5, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=5, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=5, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=5, n_estimators=200;, score=0.993 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=5, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=5, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=5, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=10, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=10, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=10, n_estimators=10;, score=0.994 total time=   0.0s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=10, n_estimators=10;, score=0.997 total time=   0.0s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=10, n_estimators=10;, score=0.993 total time=   0.0s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=10, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=10, n_estimators=50;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=10, n_estimators=50;, score=0.994 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=10, n_estimators=50;, score=0.997 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=10, n_estimators=50;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=10, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=10, n_estimators=100;, score=0.993 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=10, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=10, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=10, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=10, n_estimators=200;, score=0.993 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=10, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=10, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=10, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=20, n_estimators=10;, score=0.994 total time=   0.1s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=20, n_estimators=10;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=20, n_estimators=10;, score=0.994 total time=   0.1s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=20, n_estimators=10;, score=0.997 total time=   0.1s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=20, n_estimators=10;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=20, n_estimators=50;, score=0.994 total time=   0.3s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=20, n_estimators=50;, score=0.993 total time=   0.6s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=20, n_estimators=50;, score=0.994 total time=   0.3s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=20, n_estimators=50;, score=0.997 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=20, n_estimators=50;, score=0.993 total time=   0.3s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=20, n_estimators=100;, score=0.994 total time=   0.3s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=20, n_estimators=100;, score=0.993 total time=   0.2s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=20, n_estimators=100;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=20, n_estimators=100;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END learning_rate=0.001, max_depth=20, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "[CV 2/5] END learning_rate=0.001, max_depth=20, n_estimators=200;, score=0.993 total time=   0.4s\n",
            "[CV 3/5] END learning_rate=0.001, max_depth=20, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 4/5] END learning_rate=0.001, max_depth=20, n_estimators=200;, score=0.996 total time=   0.4s\n",
            "[CV 5/5] END learning_rate=0.001, max_depth=20, n_estimators=200;, score=0.994 total time=   0.4s\n",
            "XGBoost best params: {'learning_rate': 0.5, 'max_depth': 5, 'n_estimators': 200}. Exited the get_best_params_for_xgboost method of the Model_Finder class\n"
          ]
        }
      ],
      "source": [
        "xgb_classifier = get_best_params_for_xgboost(x_train,y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LBbtdjr9H3Ao"
      },
      "outputs": [],
      "source": [
        "def get_best_model(train_x,train_y,test_x,test_y):\n",
        "        \"\"\"\n",
        "                                                Method Name: get_best_model\n",
        "                                                Description: Find out the Model which has the best AUC score.\n",
        "                                                Output: The best model name and the model object\n",
        "                                                On Failure: Raise Exception\n",
        "\n",
        "        \"\"\"\n",
        "        print('Entered the get_best_model method of the Model_Finder class')\n",
        "        # create best model for KNN\n",
        "        try:\n",
        "            knn= get_best_params_for_KNN(train_x,train_y)\n",
        "            prediction_knn = knn.predict_proba(test_x) # Predictions using the KNN Model\n",
        "\n",
        "            if len(test_y.unique()) == 1: #if there is only one label in y, then roc_auc_score returns error. We will use accuracy in that case\n",
        "                knn_score = accuracy_score(test_y, prediction_knn)\n",
        "                print('Accuracy for knn:' + str(knn_score))  # Log AUC\n",
        "            else:\n",
        "                knn_score = roc_auc_score(test_y, prediction_knn, multi_class='ovr') # AUC for KNN\n",
        "                print('AUC for knn:' + str(knn_score)) # Log AUC\n",
        "\n",
        "            # create best model for Random Forest\n",
        "            random_forest= get_best_params_for_random_forest(train_x,train_y)\n",
        "            prediction_random_forest=random_forest.predict_proba(test_x) # prediction using the Random Forest Algorithm\n",
        "\n",
        "            if len(test_y.unique()) == 1:#if there is only one label in y, then roc_auc_score returns error. We will use accuracy in that case\n",
        "                random_forest_score = accuracy_score((test_y),prediction_random_forest)\n",
        "                print('Accuracy for RF:' + str(random_forest_score))\n",
        "            else:\n",
        "                random_forest_score = roc_auc_score((test_y), prediction_random_forest,multi_class='ovr') # AUC for Random Forest\n",
        "                print('AUC for RF:' + str(random_forest_score))\n",
        "\n",
        "            #comparing the two models\n",
        "            if(random_forest_score <  knn_score):\n",
        "                return 'KNN', knn\n",
        "            else:\n",
        "                return 'RandomForest', random_forest\n",
        "\n",
        "        except Exception as e:\n",
        "            print('Exception occured in get_best_model method of the Model_Finder class. Exception message:  ' + str(e))\n",
        "            print('Model Selection Failed. Exited the get_best_model method of the Model_Finder class')\n",
        "\n",
        "            raise Exception()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GEfYJnBjI2DB",
        "outputId": "734721d9-37de-482a-cf35-26c74a8ab658"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Entered the get_best_model method of the Model_Finder class\n",
            "Entered the get_best_params_for_Ensembled_KNN method of the Model_Finder class\n",
            "Fitting 5 folds for each of 180 candidates, totalling 900 fits\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=ball_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=5, p=2;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=10, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=17, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=24, n_neighbors=11, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=28, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=30, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.994 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=1;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=kd_tree, leaf_size=35, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=10, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=5, p=2;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.992 total time=   0.4s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.994 total time=   0.5s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=17, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=24, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.993 total time=   0.3s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.4s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=1;, score=0.994 total time=   0.5s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.992 total time=   0.3s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=28, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=1;, score=0.996 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=30, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.3s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=1;, score=0.996 total time=   0.3s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.3s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=4, p=2;, score=0.996 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.992 total time=   0.3s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.3s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=5, p=2;, score=0.994 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=8, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=10, p=2;, score=0.993 total time=   0.1s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.994 total time=   0.2s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.992 total time=   0.2s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.991 total time=   0.2s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=1;, score=0.993 total time=   0.2s\n",
            "[CV 1/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.987 total time=   0.1s\n",
            "[CV 2/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 3/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.992 total time=   0.1s\n",
            "[CV 4/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.991 total time=   0.1s\n",
            "[CV 5/5] END algorithm=brute, leaf_size=35, n_neighbors=11, p=2;, score=0.993 total time=   0.1s\n",
            "KNN best params: {'algorithm': 'ball_tree', 'leaf_size': 10, 'n_neighbors': 4, 'p': 1}. Exited the KNN method of the Model_Finder class\n",
            "AUC for knn:0.9278360802814553\n",
            "Entered the get_best_params_for_random_forest method of the Model_Finder class\n",
            "Fitting 5 folds for each of 32 candidates, totalling 160 fits\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.919 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.965 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.958 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.958 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.919 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.966 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.960 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.950 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.970 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.969 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.965 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.955 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.977 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.965 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.962 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.966 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.970 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.893 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.935 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.959 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.955 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.961 total time=   0.0s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.969 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.965 total time=   0.1s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.962 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.941 total time=   0.1s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.965 total time=   0.1s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.955 total time=   0.2s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.965 total time=   0.2s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.962 total time=   0.2s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.941 total time=   0.2s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.970 total time=   0.2s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.940 total time=   0.3s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.969 total time=   0.4s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.972 total time=   0.4s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.966 total time=   0.4s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.970 total time=   0.4s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.972 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.959 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.957 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.973 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.977 total time=   0.1s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.971 total time=   0.2s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.973 total time=   0.2s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.977 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.971 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.973 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.977 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.971 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.973 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.976 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.965 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.972 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.975 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.970 total time=   0.0s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.971 total time=   0.1s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.973 total time=   0.1s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.977 total time=   0.1s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.972 total time=   0.2s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.971 total time=   0.2s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.972 total time=   0.2s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.973 total time=   0.2s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.977 total time=   0.2s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.972 total time=   0.3s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.971 total time=   0.3s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.972 total time=   0.3s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.973 total time=   0.3s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.894 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.965 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.962 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.950 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.970 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.969 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.946 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.962 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.973 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.970 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.965 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.962 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.957 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.970 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.971 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.962 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.966 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.953 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.928 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.966 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.941 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.973 total time=   0.0s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.906 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.971 total time=   0.1s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.966 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.973 total time=   0.1s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.965 total time=   0.1s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.969 total time=   0.3s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.965 total time=   0.3s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.951 total time=   0.3s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.966 total time=   0.3s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.970 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.972 total time=   0.4s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.947 total time=   0.4s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.962 total time=   0.4s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.952 total time=   0.3s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.970 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.974 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.966 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.977 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.973 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.977 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.964 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.974 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.979 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.973 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.980 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.971 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.972 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.973 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.977 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.971 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.972 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.973 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.977 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.958 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.974 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.972 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.976 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.949 total time=   0.0s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.964 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.971 total time=   0.1s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.972 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.973 total time=   0.1s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.977 total time=   0.1s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.972 total time=   0.2s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.971 total time=   0.2s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.972 total time=   0.2s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.973 total time=   0.2s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.977 total time=   0.2s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.972 total time=   0.3s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.971 total time=   0.3s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.972 total time=   0.3s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.973 total time=   0.3s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.977 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Forest best params: {'criterion': 'entropy', 'max_depth': 3, 'max_features': 'auto', 'n_estimators': 50}. Exited the get_best_params_for_random_forest method of the Model_Finder class\n",
            "AUC for RF:0.9695231931491107\n"
          ]
        }
      ],
      "source": [
        "best_model_name , best_model  = get_best_model(x_train,y_train,x_test,y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "eGOJsMhoGrxk",
        "outputId": "670cee88-14f3-4e03-ac93-bbfe33b62a4d"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'RandomForest'"
            ]
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "best_model_name"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 92
        },
        "id": "-4Z5AV9aIh3X",
        "outputId": "64c7d9f2-fa15-45a4-f35f-c05217b33e88"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=3, max_features=&#x27;auto&#x27;,\n",
              "                       n_estimators=50)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(criterion=&#x27;entropy&#x27;, max_depth=3, max_features=&#x27;auto&#x27;,\n",
              "                       n_estimators=50)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "RandomForestClassifier(criterion='entropy', max_depth=3, max_features='auto',\n",
              "                       n_estimators=50)"
            ]
          },
          "execution_count": 65,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "best_model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cesO8ltqIkcL",
        "outputId": "15464461-60fb-4aca-ffdb-681364aad2e8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9787985865724381"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "best_model.score(x_test,y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "q7lrI8HDIxwK",
        "outputId": "047095c1-9052-4294-ff0f-cf47a0b45308"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_train"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-d434ffcb-0cab-4b28-a885-15bce350fa1a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>psych</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8965</th>\n",
              "      <td>29.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>37.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12013</th>\n",
              "      <td>42.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8567</th>\n",
              "      <td>61.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13486</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12194</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d434ffcb-0cab-4b28-a885-15bce350fa1a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d434ffcb-0cab-4b28-a885-15bce350fa1a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d434ffcb-0cab-4b28-a885-15bce350fa1a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97883573-1892-44bb-a8bd-4dd86350e1b2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97883573-1892-44bb-a8bd-4dd86350e1b2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97883573-1892-44bb-a8bd-4dd86350e1b2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "        age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  \\\n",
              "8965   29.0  0.0           0.0                 0.0                        0.0   \n",
              "12013  42.0  1.0           0.0                 0.0                        0.0   \n",
              "8567   61.0  0.0           0.0                 0.0                        0.0   \n",
              "13486  47.0  0.0           0.0                 0.0                        0.0   \n",
              "12194  47.0  0.0           0.0                 0.0                        0.0   \n",
              "\n",
              "       sick  pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  \\\n",
              "8965    0.0       0.0              0.0             0.0                0.0   \n",
              "12013   0.0       0.0              0.0             0.0                1.0   \n",
              "8567    0.0       0.0              0.0             0.0                0.0   \n",
              "13486   0.0       0.0              0.0             0.0                0.0   \n",
              "12194   0.0       0.0              0.0             0.0                0.0   \n",
              "\n",
              "       ...  psych   T3   TT4  T4U   FTI  referral_source_STMW  \\\n",
              "8965   ...    0.0  2.0  37.0  2.0  41.0                   0.0   \n",
              "12013  ...    0.0  3.0  23.0  2.0  58.0                   0.0   \n",
              "8567   ...    0.0  2.0  13.0  2.0  11.0                   0.0   \n",
              "13486  ...    0.0  2.0  49.0  2.0  55.0                   0.0   \n",
              "12194  ...    0.0  2.0  49.0  2.0  55.0                   0.0   \n",
              "\n",
              "       referral_source_SVHC  referral_source_SVHD  referral_source_SVI  \\\n",
              "8965                    0.0                   0.0                  0.0   \n",
              "12013                   0.0                   0.0                  0.0   \n",
              "8567                    0.0                   0.0                  0.0   \n",
              "13486                   0.0                   0.0                  0.0   \n",
              "12194                   0.0                   0.0                  0.0   \n",
              "\n",
              "       referral_source_other  \n",
              "8965                     1.0  \n",
              "12013                    1.0  \n",
              "8567                     1.0  \n",
              "13486                    1.0  \n",
              "12194                    1.0  \n",
              "\n",
              "[5 rows x 25 columns]"
            ]
          },
          "execution_count": 67,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xk96IZoRJYBt",
        "outputId": "98d7441d-1ee7-4131-8300-af80a0a31e1f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(4528, 25)"
            ]
          },
          "execution_count": 68,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0jzs3H5ZIqrk",
        "outputId": "425936fb-2053-4756-e480-7288bceffa7b"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([2.])"
            ]
          },
          "execution_count": 69,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "best_model.predict([[49.0,\t0.0, 1.0, 0.0,\t0.0,\t0.0,\t0.0,\t0.0,\t0.0,\t1.0,\t0.0,\t0.0,\t0.0,\t0.0,\t0.0,\t0.0\t,2.0,\t64.0,\t2.0,\t60.0,\t0.0,\t0.0,\t0.0,\t0.0,\t1.0]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qnnIrpeFKVFu"
      },
      "outputs": [],
      "source": [
        "enc =  pickle.load(open('enc.pickle','rb'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p2bfSw1JXXxr",
        "outputId": "03177d74-bd05-4dc8-ff0c-5ba0f8952fe2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([2., 3., 2., ..., 2., 3., 3.])"
            ]
          },
          "execution_count": 71,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "best_model.predict(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Na9KmZ_OXhmp",
        "outputId": "70c47c02-a5b8-43ec-8df2-4dc143b9c374"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['secondary_hypothyroid', 'primary_hypothyroid', 'negative',\n",
              "       'compensated_hypothyroid', 'negative', 'primary_hypothyroid',\n",
              "       'secondary_hypothyroid'], dtype=object)"
            ]
          },
          "execution_count": 72,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "enc.inverse_transform([3,2,1,0,1,2,3])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NJ8bxfrYZmok"
      },
      "source": [
        "#### For one one prediction, we will use XGBoost Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 248
        },
        "id": "EZ6c2JK2YCJo",
        "outputId": "f296c62c-2095-4267-8d63-db5a4ab23074"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=1, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=5, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=50, n_jobs=None,\n",
              "              num_parallel_tree=None, objective=&#x27;multi:softprob&#x27;, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=1, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=5, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=50, n_jobs=None,\n",
              "              num_parallel_tree=None, objective=&#x27;multi:softprob&#x27;, ...)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=None, feature_types=None,\n",
              "              gamma=None, grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=1, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=5, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=50, n_jobs=None,\n",
              "              num_parallel_tree=None, objective='multi:softprob', ...)"
            ]
          },
          "execution_count": 73,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xgb_classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q57Ka0skYt1N",
        "outputId": "cd4ce40f-c111-4c24-8bca-fdc6caf245a6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([2, 3, 2, ..., 2, 3, 3])"
            ]
          },
          "execution_count": 74,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xgb_classifier.predict(x_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XTN5FKq-Yz3Y",
        "outputId": "e1c92653-43fe-4fbc-b9fc-cd96c807cbc7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9964664310954063"
            ]
          },
          "execution_count": 75,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "xgb_classifier.score(x_test,y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J61pna-7Y6tQ"
      },
      "outputs": [],
      "source": [
        "pickle.dump(xgb_classifier,open('xg_Model.pkl','wb'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YUslVpC0Zcv0"
      },
      "outputs": [],
      "source": [
        "pickle.dump(new_df,open('df.pkl','wb'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JYwUCwTGZ5M3"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yUFM2fneaT6s"
      },
      "source": [
        "In this notebook, the modle building work has only done for cluster == 1 and rest is understood that for other cluster also we will proceed same."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "-asJihl3anMS",
        "outputId": "7cbbbd84-c8bb-4ea0-c037-5f2d1264cda4"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_train"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-91be5117-3017-4050-a96f-1bd6028e3cc6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>psych</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8965</th>\n",
              "      <td>29.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>37.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12013</th>\n",
              "      <td>42.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8567</th>\n",
              "      <td>61.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13486</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12194</th>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>49.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>55.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 25 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91be5117-3017-4050-a96f-1bd6028e3cc6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-91be5117-3017-4050-a96f-1bd6028e3cc6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-91be5117-3017-4050-a96f-1bd6028e3cc6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-453f3c79-60b2-471e-8a92-c306a674e57a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-453f3c79-60b2-471e-8a92-c306a674e57a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-453f3c79-60b2-471e-8a92-c306a674e57a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "        age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  \\\n",
              "8965   29.0  0.0           0.0                 0.0                        0.0   \n",
              "12013  42.0  1.0           0.0                 0.0                        0.0   \n",
              "8567   61.0  0.0           0.0                 0.0                        0.0   \n",
              "13486  47.0  0.0           0.0                 0.0                        0.0   \n",
              "12194  47.0  0.0           0.0                 0.0                        0.0   \n",
              "\n",
              "       sick  pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  \\\n",
              "8965    0.0       0.0              0.0             0.0                0.0   \n",
              "12013   0.0       0.0              0.0             0.0                1.0   \n",
              "8567    0.0       0.0              0.0             0.0                0.0   \n",
              "13486   0.0       0.0              0.0             0.0                0.0   \n",
              "12194   0.0       0.0              0.0             0.0                0.0   \n",
              "\n",
              "       ...  psych   T3   TT4  T4U   FTI  referral_source_STMW  \\\n",
              "8965   ...    0.0  2.0  37.0  2.0  41.0                   0.0   \n",
              "12013  ...    0.0  3.0  23.0  2.0  58.0                   0.0   \n",
              "8567   ...    0.0  2.0  13.0  2.0  11.0                   0.0   \n",
              "13486  ...    0.0  2.0  49.0  2.0  55.0                   0.0   \n",
              "12194  ...    0.0  2.0  49.0  2.0  55.0                   0.0   \n",
              "\n",
              "       referral_source_SVHC  referral_source_SVHD  referral_source_SVI  \\\n",
              "8965                    0.0                   0.0                  0.0   \n",
              "12013                   0.0                   0.0                  0.0   \n",
              "8567                    0.0                   0.0                  0.0   \n",
              "13486                   0.0                   0.0                  0.0   \n",
              "12194                   0.0                   0.0                  0.0   \n",
              "\n",
              "       referral_source_other  \n",
              "8965                     1.0  \n",
              "12013                    1.0  \n",
              "8567                     1.0  \n",
              "13486                    1.0  \n",
              "12194                    1.0  \n",
              "\n",
              "[5 rows x 25 columns]"
            ]
          },
          "execution_count": 78,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s5IW9aslkWas"
      },
      "source": [
        "### Model for one-one input"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "Q6tbQltui4kw",
        "outputId": "81606912-32de-45ef-b599-24d2388a28cc"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-b53c549c-91fa-45d7-adde-2c8e25b3c6a1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>Class</th>\n",
              "      <th>referral_source_STMW</th>\n",
              "      <th>referral_source_SVHC</th>\n",
              "      <th>referral_source_SVHD</th>\n",
              "      <th>referral_source_SVI</th>\n",
              "      <th>referral_source_other</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>42.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>176.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 26 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b53c549c-91fa-45d7-adde-2c8e25b3c6a1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b53c549c-91fa-45d7-adde-2c8e25b3c6a1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b53c549c-91fa-45d7-adde-2c8e25b3c6a1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-69925977-1d10-4227-96d8-1364ec8dc5f9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-69925977-1d10-4227-96d8-1364ec8dc5f9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-69925977-1d10-4227-96d8-1364ec8dc5f9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    age  sex  on_thyroxine  query_on_thyroxine  on_antithyroid_medication  \\\n",
              "0  42.0  0.0           0.0                 0.0                        0.0   \n",
              "1  24.0  0.0           0.0                 0.0                        0.0   \n",
              "2  47.0  1.0           0.0                 0.0                        0.0   \n",
              "3  71.0  0.0           1.0                 0.0                        0.0   \n",
              "4  71.0  0.0           0.0                 0.0                        0.0   \n",
              "\n",
              "   sick  pregnant  thyroid_surgery  I131_treatment  query_hypothyroid  ...  \\\n",
              "0   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "1   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "2   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "3   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "4   0.0       0.0              0.0             0.0                0.0  ...   \n",
              "\n",
              "    T3    TT4  T4U    FTI  Class  referral_source_STMW  referral_source_SVHC  \\\n",
              "0  3.0  126.0  2.0  110.0    1.0                   0.0                   1.0   \n",
              "1  3.0  103.0  2.0  109.0    1.0                   0.0                   0.0   \n",
              "2  3.0  110.0  2.0  121.0    1.0                   0.0                   0.0   \n",
              "3  3.0  176.0  2.0  178.0    1.0                   0.0                   0.0   \n",
              "4  2.0   62.0  2.0   71.0    1.0                   0.0                   0.0   \n",
              "\n",
              "   referral_source_SVHD  referral_source_SVI  referral_source_other  \n",
              "0                   0.0                  0.0                    0.0  \n",
              "1                   0.0                  0.0                    1.0  \n",
              "2                   0.0                  0.0                    1.0  \n",
              "3                   0.0                  0.0                    1.0  \n",
              "4                   0.0                  1.0                    0.0  \n",
              "\n",
              "[5 rows x 26 columns]"
            ]
          },
          "execution_count": 79,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "new_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dfhgI1EpqpIk"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3xB-n2Wfctbz"
      },
      "outputs": [],
      "source": [
        "data = new_df.copy()\n",
        "new_df.drop(\"query_on_thyroxine\", axis = 1, inplace = True)\n",
        "new_df.drop(\"sick\", axis = 1, inplace = True)\n",
        "new_df.drop(\"pregnant\", axis = 1, inplace = True)\n",
        "new_df.drop(\"thyroid_surgery\", axis = 1, inplace = True)\n",
        "new_df.drop(\"I131_treatment\", axis = 1, inplace = True)\n",
        "new_df.drop(\"query_hypothyroid\", axis = 1, inplace = True)\n",
        "new_df.drop(\"query_hyperthyroid\", axis = 1, inplace = True)\n",
        "new_df.drop(\"lithium\", axis = 1, inplace = True)\n",
        "new_df.drop(\"tumor\", axis = 1, inplace = True)\n",
        "new_df.drop(\"referral_source_SVHC\", axis = 1, inplace = True)\n",
        "new_df.drop(\"referral_source_SVHD\", axis = 1, inplace = True)\n",
        "new_df.drop(\"referral_source_SVI\", axis = 1, inplace = True)\n",
        "new_df.drop(\"referral_source_other\", axis = 1, inplace = True)\n",
        "new_df.drop(\"referral_source_STMW\", axis = 1, inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "uo-INbApqoV6",
        "outputId": "4fa4d290-376f-40ae-bae9-d51546479fb3"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"new_df\",\n  \"rows\": 3772,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20.082478032890165,\n        \"min\": 2.0,\n        \"max\": 456.0,\n        \"num_unique_values\": 93,\n        \"samples\": [\n          70.0,\n          74.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4615316331163574,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"on_thyroxine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3284941444531411,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"on_antithyroid_medication\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10617354331162304,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goitre\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09452463277251781,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypopituitary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0162822402256459,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"psych\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2154373609551822,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7850863269383797,\n        \"min\": 1.0,\n        \"max\": 12.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          12.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TT4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.838114055342274,\n        \"min\": 3.0,\n        \"max\": 431.0,\n        \"num_unique_values\": 238,\n        \"samples\": [\n          194.0,\n          71.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T4U\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1655455051118919,\n        \"min\": 1.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FTI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.14561751213779,\n        \"min\": 3.0,\n        \"max\": 396.0,\n        \"num_unique_values\": 229,\n        \"samples\": [\n          292.0,\n          100.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Class\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27950754611656164,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "new_df"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-9e68a264-e2af-48bb-ada2-86a43925a3c2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>goitre</th>\n",
              "      <th>hypopituitary</th>\n",
              "      <th>psych</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>42.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>126.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>47.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>110.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>121.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>176.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>178.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>71.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>71.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e68a264-e2af-48bb-ada2-86a43925a3c2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e68a264-e2af-48bb-ada2-86a43925a3c2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e68a264-e2af-48bb-ada2-86a43925a3c2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a1ac6014-30e4-4875-8b54-2a70744cc02a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1ac6014-30e4-4875-8b54-2a70744cc02a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a1ac6014-30e4-4875-8b54-2a70744cc02a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "    age  sex  on_thyroxine  on_antithyroid_medication  goitre  hypopituitary  \\\n",
              "0  42.0  0.0           0.0                        0.0     0.0            0.0   \n",
              "1  24.0  0.0           0.0                        0.0     0.0            0.0   \n",
              "2  47.0  1.0           0.0                        0.0     0.0            0.0   \n",
              "3  71.0  0.0           1.0                        0.0     0.0            0.0   \n",
              "4  71.0  0.0           0.0                        0.0     0.0            0.0   \n",
              "\n",
              "   psych   T3    TT4  T4U    FTI  Class  \n",
              "0    0.0  3.0  126.0  2.0  110.0    1.0  \n",
              "1    0.0  3.0  103.0  2.0  109.0    1.0  \n",
              "2    0.0  3.0  110.0  2.0  121.0    1.0  \n",
              "3    0.0  3.0  176.0  2.0  178.0    1.0  \n",
              "4    0.0  2.0   62.0  2.0   71.0    1.0  "
            ]
          },
          "execution_count": 81,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "new_df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "veiFNA-4r3wf"
      },
      "outputs": [],
      "source": [
        "x = new_df.drop(\"Class\", axis = 1)\n",
        "y = new_df[\"Class\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YtrGJ-nLqq5W"
      },
      "outputs": [],
      "source": [
        "# splitting the data into training and test set for each cluster one by one\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1 / 3, random_state=100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kpCByiErs2_U",
        "outputId": "a834ec9a-5b95-4626-f5ba-f11701b18ba9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Entered the get_best_params_for_random_forest method of the Model_Finder class\n",
            "Fitting 5 folds for each of 32 candidates, totalling 160 fits\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.936 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.934 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.942 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.938 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=10;, score=0.936 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.934 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.934 total time=   0.1s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.940 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=50;, score=0.936 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.936 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.934 total time=   0.2s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.944 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.938 total time=   0.2s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=100;, score=0.936 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.936 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.934 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.940 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.938 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=auto, n_estimators=130;, score=0.936 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.934 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.934 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.944 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.938 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=10;, score=0.936 total time=   0.0s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.938 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.934 total time=   0.1s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.944 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.938 total time=   0.1s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.936 total time=   0.2s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.932 total time=   0.3s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.944 total time=   0.3s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.938 total time=   0.3s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=100;, score=0.936 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.936 total time=   0.4s\n",
            "[CV 2/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.934 total time=   0.4s\n",
            "[CV 3/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.944 total time=   0.4s\n",
            "[CV 4/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.938 total time=   0.3s\n",
            "[CV 5/5] END criterion=gini, max_depth=2, max_features=log2, n_estimators=130;, score=0.936 total time=   0.2s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.940 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.934 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.944 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.940 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=10;, score=0.936 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.938 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.932 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.944 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.940 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=50;, score=0.938 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.936 total time=   0.2s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.932 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.944 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.940 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=100;, score=0.938 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.938 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.932 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.944 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.938 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=auto, n_estimators=130;, score=0.936 total time=   0.3s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.938 total time=   0.0s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.934 total time=   0.0s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.944 total time=   0.0s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.938 total time=   0.0s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=10;, score=0.938 total time=   0.0s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.938 total time=   0.1s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.932 total time=   0.1s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.944 total time=   0.1s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.940 total time=   0.1s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.936 total time=   0.2s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.934 total time=   0.2s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.944 total time=   0.2s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.938 total time=   0.2s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=100;, score=0.938 total time=   0.2s\n",
            "[CV 1/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.938 total time=   0.3s\n",
            "[CV 2/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.932 total time=   0.3s\n",
            "[CV 3/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.944 total time=   0.3s\n",
            "[CV 4/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.940 total time=   0.3s\n",
            "[CV 5/5] END criterion=gini, max_depth=3, max_features=log2, n_estimators=130;, score=0.938 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.936 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.936 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.944 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.926 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=10;, score=0.938 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.928 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.942 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.938 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.934 total time=   0.2s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.934 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.940 total time=   0.2s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.928 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=100;, score=0.928 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.936 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.932 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.944 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.936 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=auto, n_estimators=130;, score=0.936 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.936 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.934 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.946 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.938 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=10;, score=0.936 total time=   0.0s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.934 total time=   0.1s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.942 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.928 total time=   0.1s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.932 total time=   0.3s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.932 total time=   0.3s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.932 total time=   0.3s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.936 total time=   0.3s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=100;, score=0.936 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.934 total time=   0.4s\n",
            "[CV 2/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.934 total time=   0.4s\n",
            "[CV 3/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.942 total time=   0.3s\n",
            "[CV 4/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.938 total time=   0.2s\n",
            "[CV 5/5] END criterion=entropy, max_depth=2, max_features=log2, n_estimators=130;, score=0.934 total time=   0.2s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.938 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.932 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.942 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.934 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=10;, score=0.936 total time=   0.0s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.934 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.944 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.938 total time=   0.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.938 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.932 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.944 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.940 total time=   0.2s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=100;, score=0.936 total time=   0.2s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.938 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.934 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.944 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.940 total time=   0.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:424: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features='sqrt'` or remove this parameter as it is also the default value for RandomForestClassifiers and ExtraTreesClassifiers.\n",
            "  warn(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=auto, n_estimators=130;, score=0.936 total time=   0.3s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.936 total time=   0.0s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.930 total time=   0.0s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.944 total time=   0.0s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.938 total time=   0.0s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=10;, score=0.936 total time=   0.0s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.938 total time=   0.1s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.932 total time=   0.1s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.944 total time=   0.1s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.940 total time=   0.1s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=50;, score=0.936 total time=   0.1s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.938 total time=   0.2s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.934 total time=   0.2s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.944 total time=   0.2s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.940 total time=   0.2s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=100;, score=0.940 total time=   0.2s\n",
            "[CV 1/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.936 total time=   0.3s\n",
            "[CV 2/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.932 total time=   0.3s\n",
            "[CV 3/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.944 total time=   0.3s\n",
            "[CV 4/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.940 total time=   0.3s\n",
            "[CV 5/5] END criterion=entropy, max_depth=3, max_features=log2, n_estimators=130;, score=0.936 total time=   0.3s\n",
            "Random Forest best params: {'criterion': 'entropy', 'max_depth': 3, 'max_features': 'log2', 'n_estimators': 100}. Exited the get_best_params_for_random_forest method of the Model_Finder class\n"
          ]
        }
      ],
      "source": [
        "# Random forest classifier\n",
        "\n",
        "rf_clf = get_best_params_for_random_forest(x_train,y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QqUV0WjStmLr",
        "outputId": "04e90fc0-10e8-444e-b5b7-989d9aa5576d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1., 1., 1., ..., 1., 1., 1.])"
            ]
          },
          "execution_count": 85,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Prediction using random forest\n",
        "prediction_random_forest=rf_clf.predict(x_test)\n",
        "prediction_random_forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "4v3ro8bk4HNG",
        "outputId": "d12d49d9-08ca-401b-c359-50fa8a62b241"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "summary": "{\n  \"name\": \"x_train\",\n  \"rows\": 2514,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20.602398719623828,\n        \"min\": 2.0,\n        \"max\": 456.0,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          74.0,\n          61.0,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.46285602074552096,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"on_thyroxine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33336071566985737,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"on_antithyroid_medication\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1068029662368669,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"goitre\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09725824160984833,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hypopituitary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.019944234107751275,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"psych\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2301333420648458,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.755850629141205,\n        \"min\": 1.0,\n        \"max\": 9.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          9.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TT4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.155593742871645,\n        \"min\": 4.0,\n        \"max\": 431.0,\n        \"num_unique_values\": 211,\n        \"samples\": [\n          122.0,\n          156.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"T4U\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17788594581625716,\n        \"min\": 1.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2.0,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FTI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.14380763519973,\n        \"min\": 4.0,\n        \"max\": 396.0,\n        \"num_unique_values\": 199,\n        \"samples\": [\n          33.0,\n          103.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}",
              "type": "dataframe",
              "variable_name": "x_train"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-8dfb467b-361c-4761-8398-d1f82be1a6b3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>goitre</th>\n",
              "      <th>hypopituitary</th>\n",
              "      <th>psych</th>\n",
              "      <th>T3</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>455</th>\n",
              "      <td>53.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>89.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>111.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>208</th>\n",
              "      <td>39.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>91.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2384</th>\n",
              "      <td>19.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>105.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3118</th>\n",
              "      <td>79.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>115.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>120.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3530</th>\n",
              "      <td>67.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>131.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8dfb467b-361c-4761-8398-d1f82be1a6b3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8dfb467b-361c-4761-8398-d1f82be1a6b3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8dfb467b-361c-4761-8398-d1f82be1a6b3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-30242bc1-655b-4ac8-986d-a25b4c03145f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30242bc1-655b-4ac8-986d-a25b4c03145f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-30242bc1-655b-4ac8-986d-a25b4c03145f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "       age  sex  on_thyroxine  on_antithyroid_medication  goitre  \\\n",
              "455   53.0  1.0           0.0                        0.0     0.0   \n",
              "208   39.0  1.0           0.0                        0.0     0.0   \n",
              "2384  19.0  0.0           0.0                        0.0     0.0   \n",
              "3118  79.0  0.0           0.0                        0.0     0.0   \n",
              "3530  67.0  1.0           0.0                        0.0     0.0   \n",
              "\n",
              "      hypopituitary  psych   T3    TT4  T4U    FTI  \n",
              "455             0.0    0.0  3.0   89.0  2.0  111.0  \n",
              "208             0.0    0.0  3.0   79.0  2.0   91.0  \n",
              "2384            0.0    0.0  3.0  143.0  2.0  105.0  \n",
              "3118            0.0    0.0  3.0  115.0  2.0  120.0  \n",
              "3530            0.0    0.0  3.0  134.0  2.0  131.0  "
            ]
          },
          "execution_count": 86,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "x_train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Db-4rvOgyucS",
        "outputId": "8e370189-b56a-4ff7-b3c8-74c539db4ccb"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([1.])"
            ]
          },
          "execution_count": 87,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "rf_clf.predict([[53,1.0,0.0,0.0,0.0,0.0,0.0,3.0, 89.0,2.0,111.0]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rNJZ9lFu4dkK",
        "outputId": "3fbcda3f-13e3-49a2-cbe4-dce1d6e96c1b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "3059    1.0\n",
              "2411    1.0\n",
              "3350    1.0\n",
              "2300    1.0\n",
              "3602    1.0\n",
              "       ... \n",
              "3430    1.0\n",
              "503     1.0\n",
              "2204    1.0\n",
              "2100    1.0\n",
              "898     1.0\n",
              "Name: Class, Length: 1258, dtype: float64"
            ]
          },
          "execution_count": 88,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_test"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K4SQV-AR4q8z"
      },
      "outputs": [],
      "source": [
        "#model saving\n",
        "\n",
        "import pickle\n",
        "\n",
        "pickle.dump(rf_clf,open(\"Thyroid_model.pkl\",\"wb\"))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yLgh8G1sster"
      },
      "source": [
        "THYROID DTECTION\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oGADTqdB5X3b"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "R-LizbHcqzPK"
      },
      "outputs": [],
      "source": [
        "from plotly.offline import iplot\n",
        "import plotly as py\n",
        "import plotly.tools as tls\n",
        "import cufflinks as cf #configuration file for plotly\n",
        "\n",
        "\n",
        "def configure_plotly_browser_state():\n",
        "  import IPython\n",
        "  display(IPython.core.display.HTML('''\n",
        "        <script src=\"/static/components/requirejs/require.js\"></script>\n",
        "        <script>\n",
        "          requirejs.config({\n",
        "            paths: {\n",
        "              base: '/static/base',\n",
        "              plotly: 'https://cdn.plot.ly/plotly-latest.min.js?noext',\n",
        "            },\n",
        "          });\n",
        "        </script>\n",
        "        '''))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "dImDoxp2q46f",
        "outputId": "f1f4cdcc-3c85-4fde-c75b-8f5de3960c6f"
      },
      "outputs": [
        {
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            },
            "text/html": [
              "\n",
              "  <div id=\"df-256f06e1-d07f-4bb7-88f9-a680db98cbf7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>on_thyroxine</th>\n",
              "      <th>query_on_thyroxine</th>\n",
              "      <th>on_antithyroid_medication</th>\n",
              "      <th>sick</th>\n",
              "      <th>pregnant</th>\n",
              "      <th>thyroid_surgery</th>\n",
              "      <th>I131_treatment</th>\n",
              "      <th>query_hypothyroid</th>\n",
              "      <th>...</th>\n",
              "      <th>TT4_measured</th>\n",
              "      <th>TT4</th>\n",
              "      <th>T4U_measured</th>\n",
              "      <th>T4U</th>\n",
              "      <th>FTI_measured</th>\n",
              "      <th>FTI</th>\n",
              "      <th>TBG_measured</th>\n",
              "      <th>TBG</th>\n",
              "      <th>referral_source</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>41</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>125</td>\n",
              "      <td>t</td>\n",
              "      <td>1.14</td>\n",
              "      <td>t</td>\n",
              "      <td>109</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>SVHC</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>23</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>102</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>46</td>\n",
              "      <td>M</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>109</td>\n",
              "      <td>t</td>\n",
              "      <td>0.91</td>\n",
              "      <td>t</td>\n",
              "      <td>120</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>70</td>\n",
              "      <td>F</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>175</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>other</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70</td>\n",
              "      <td>F</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>t</td>\n",
              "      <td>61</td>\n",
              "      <td>t</td>\n",
              "      <td>0.87</td>\n",
              "      <td>t</td>\n",
              "      <td>70</td>\n",
              "      <td>f</td>\n",
              "      <td>?</td>\n",
              "      <td>SVI</td>\n",
              "      <td>negative</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 30 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-256f06e1-d07f-4bb7-88f9-a680db98cbf7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-256f06e1-d07f-4bb7-88f9-a680db98cbf7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-256f06e1-d07f-4bb7-88f9-a680db98cbf7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7afbed5d-84de-4dec-a60f-f5ca1c1b7e4b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7afbed5d-84de-4dec-a60f-f5ca1c1b7e4b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7afbed5d-84de-4dec-a60f-f5ca1c1b7e4b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  age sex on_thyroxine query_on_thyroxine on_antithyroid_medication sick  \\\n",
              "0  41   F            f                  f                         f    f   \n",
              "1  23   F            f                  f                         f    f   \n",
              "2  46   M            f                  f                         f    f   \n",
              "3  70   F            t                  f                         f    f   \n",
              "4  70   F            f                  f                         f    f   \n",
              "\n",
              "  pregnant thyroid_surgery I131_treatment query_hypothyroid  ... TT4_measured  \\\n",
              "0        f               f              f                 f  ...            t   \n",
              "1        f               f              f                 f  ...            t   \n",
              "2        f               f              f                 f  ...            t   \n",
              "3        f               f              f                 f  ...            t   \n",
              "4        f               f              f                 f  ...            t   \n",
              "\n",
              "   TT4 T4U_measured   T4U FTI_measured  FTI TBG_measured TBG referral_source  \\\n",
              "0  125            t  1.14            t  109            f   ?            SVHC   \n",
              "1  102            f     ?            f    ?            f   ?           other   \n",
              "2  109            t  0.91            t  120            f   ?           other   \n",
              "3  175            f     ?            f    ?            f   ?           other   \n",
              "4   61            t  0.87            t   70            f   ?             SVI   \n",
              "\n",
              "      Class  \n",
              "0  negative  \n",
              "1  negative  \n",
              "2  negative  \n",
              "3  negative  \n",
              "4  negative  \n",
              "\n",
              "[5 rows x 30 columns]"
            ]
          },
          "execution_count": 92,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data = pd.read_csv(\"hypothyroid.csv\")\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PKb1T1bAq-xp",
        "outputId": "67d3d454-960e-47b9-f1fd-cb4d20913468"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(3772, 30)"
            ]
          },
          "execution_count": 93,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FiNE5urjrK5N",
        "outputId": "591ce2d3-6f99-4e56-ac1b-bb3af4272135"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['age', 'sex', 'on_thyroxine', 'query_on_thyroxine',\n",
              "       'on_antithyroid_medication', 'sick', 'pregnant', 'thyroid_surgery',\n",
              "       'I131_treatment', 'query_hypothyroid', 'query_hyperthyroid', 'lithium',\n",
              "       'goitre', 'tumor', 'hypopituitary', 'psych', 'TSH_measured', 'TSH',\n",
              "       'T3_measured', 'T3', 'TT4_measured', 'TT4', 'T4U_measured', 'T4U',\n",
              "       'FTI_measured', 'FTI', 'TBG_measured', 'TBG', 'referral_source',\n",
              "       'Class'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 94,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hChwfpMCrNnf",
        "outputId": "748bd7fe-7a66-46a6-9bd5-f3e9dd27e7d6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3772 entries, 0 to 3771\n",
            "Data columns (total 30 columns):\n",
            " #   Column                     Non-Null Count  Dtype \n",
            "---  ------                     --------------  ----- \n",
            " 0   age                        3772 non-null   object\n",
            " 1   sex                        3772 non-null   object\n",
            " 2   on_thyroxine               3772 non-null   object\n",
            " 3   query_on_thyroxine         3772 non-null   object\n",
            " 4   on_antithyroid_medication  3772 non-null   object\n",
            " 5   sick                       3772 non-null   object\n",
            " 6   pregnant                   3772 non-null   object\n",
            " 7   thyroid_surgery            3772 non-null   object\n",
            " 8   I131_treatment             3772 non-null   object\n",
            " 9   query_hypothyroid          3772 non-null   object\n",
            " 10  query_hyperthyroid         3772 non-null   object\n",
            " 11  lithium                    3772 non-null   object\n",
            " 12  goitre                     3772 non-null   object\n",
            " 13  tumor                      3772 non-null   object\n",
            " 14  hypopituitary              3772 non-null   object\n",
            " 15  psych                      3772 non-null   object\n",
            " 16  TSH_measured               3772 non-null   object\n",
            " 17  TSH                        3772 non-null   object\n",
            " 18  T3_measured                3772 non-null   object\n",
            " 19  T3                         3772 non-null   object\n",
            " 20  TT4_measured               3772 non-null   object\n",
            " 21  TT4                        3772 non-null   object\n",
            " 22  T4U_measured               3772 non-null   object\n",
            " 23  T4U                        3772 non-null   object\n",
            " 24  FTI_measured               3772 non-null   object\n",
            " 25  FTI                        3772 non-null   object\n",
            " 26  TBG_measured               3772 non-null   object\n",
            " 27  TBG                        3772 non-null   object\n",
            " 28  referral_source            3772 non-null   object\n",
            " 29  Class                      3772 non-null   object\n",
            "dtypes: object(30)\n",
            "memory usage: 884.2+ KB\n"
          ]
        }
      ],
      "source": [
        "data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 623
        },
        "id": "AgpsBOOYrRdP",
        "outputId": "120484ae-666f-4b04-d685-0a6981e0a9de"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data[\"Class\"].value_counts().plot(kind = \"bar\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "07ML7v59rZy_"
      },
      "outputs": [],
      "source": [
        "# replacing the '?' values with numpy nan\n",
        "\n",
        "for column in data.columns:\n",
        "    count = data[column][data[column]=='?'].count()\n",
        "    if count!=0:\n",
        "        data[column] = data[column].replace('?',np.nan)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-Z7eFJjircgw"
      },
      "outputs": [],
      "source": [
        "data[\"age\"] = pd.to_numeric(data[\"age\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "0DrbUZIPrfZz",
        "outputId": "a6ca59ad-1126-4eda-bcd0-ea0da5f2cc27"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "sns.boxplot(x = \"Class\", y = \"age\", data = data)\n",
        "plt.title(\"Type of Thyroid vs Age\")\n",
        "plt.xlabel(\"Type of Thyroid\")\n",
        "plt.ylabel(\"Age\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "lMj786CLrjQL",
        "outputId": "9a0ea9e2-485b-42fa-dc63-76aaadd6a936"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "execution_count": 100,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data[\"sex\"].value_counts().plot(kind = \"bar\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 831
        },
        "id": "8Ttnbm4WrmkT",
        "outputId": "b93ae0a7-e606-4c17-ac1c-84ff9eaec714"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "([0, 1, 2, 3],\n",
              " [Text(0, 0, 'negative'),\n",
              "  Text(1, 0, 'compensated_hypothyroid'),\n",
              "  Text(2, 0, 'primary_hypothyroid'),\n",
              "  Text(3, 0, 'secondary_hypothyroid')])"
            ]
          },
          "execution_count": 101,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(6,6))\n",
        "sns.histplot(binwidth=0.5, x=\"Class\", hue=\"sex\", data=data, stat=\"count\", multiple=\"stack\")\n",
        "plt.xticks(rotation = \"vertical\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "Bcw_b5zcrriZ",
        "outputId": "c798e4c1-40ae-4aa5-bea4-de951d335321"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "execution_count": 102,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data[\"sick\"].value_counts().plot(kind = \"bar\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 826
        },
        "id": "1dM_nf4UrvCU",
        "outputId": "1391da86-3fa1-427e-c09b-93a9ac358b80"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "([0, 1, 2, 3],\n",
              " [Text(0, 0, 'negative'),\n",
              "  Text(1, 0, 'compensated_hypothyroid'),\n",
              "  Text(2, 0, 'primary_hypothyroid'),\n",
              "  Text(3, 0, 'secondary_hypothyroid')])"
            ]
          },
          "execution_count": 103,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(6,6))\n",
        "sns.histplot(binwidth=0.5, x=\"Class\", hue=\"sick\", data=data, stat=\"count\", multiple=\"stack\")\n",
        "plt.xticks(rotation = \"vertical\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "X0FwEtzIrxpr",
        "outputId": "7662e5e2-17e8-4119-b23c-3e941b372e7a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "execution_count": 104,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data[\"pregnant\"].value_counts().plot(kind = \"bar\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 826
        },
        "id": "hi7APORVr0HH",
        "outputId": "39409d8c-f101-4b1f-f2ca-28af6883b271"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "([0, 1, 2, 3],\n",
              " [Text(0, 0, 'negative'),\n",
              "  Text(1, 0, 'compensated_hypothyroid'),\n",
              "  Text(2, 0, 'primary_hypothyroid'),\n",
              "  Text(3, 0, 'secondary_hypothyroid')])"
            ]
          },
          "execution_count": 105,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(6,6))\n",
        "sns.histplot(binwidth=0.5, x=\"Class\", hue=\"pregnant\", data=data, stat=\"count\", multiple=\"stack\")\n",
        "plt.xticks(rotation = \"vertical\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "BRyxfyYxr4i0",
        "outputId": "9b3f2d56-e291-499f-d237-3b63a3b0bff6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "execution_count": 106,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data[\"thyroid_surgery\"].value_counts().plot(kind = \"bar\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 826
        },
        "id": "NsxEnhQQr7tT",
        "outputId": "6f32e329-f9f3-424a-a54e-5ad24eaa7434"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "([0, 1, 2, 3],\n",
              " [Text(0, 0, 'negative'),\n",
              "  Text(1, 0, 'compensated_hypothyroid'),\n",
              "  Text(2, 0, 'primary_hypothyroid'),\n",
              "  Text(3, 0, 'secondary_hypothyroid')])"
            ]
          },
          "execution_count": 107,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(6,6))\n",
        "sns.histplot(binwidth=0.5, x=\"Class\", hue=\"thyroid_surgery\", data=data, stat=\"count\", multiple=\"stack\")\n",
        "plt.xticks(rotation = \"vertical\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "4AG5d6Ymr_WS",
        "outputId": "2f23f13e-0979-46ef-f711-c3bb21fd1912"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data['T3'] = pd.to_numeric(data['T3'])\n",
        "\n",
        "plt.figure(figsize=(12,6))\n",
        "sns.boxplot(x = \"Class\", y = \"T3\", data = data)\n",
        "plt.title(\"Type of Thyroid vs T3\")\n",
        "plt.xlabel(\"Type of Thyroid\")\n",
        "plt.ylabel(\"T3\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "O9a6C97RsDIu",
        "outputId": "36acde0f-5b1e-48b8-f4f7-81f93849a572"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data['TT4'] = pd.to_numeric(data['TT4'])\n",
        "\n",
        "plt.figure(figsize=(12,6))\n",
        "sns.boxplot(x = \"Class\", y = \"TT4\", data = data)\n",
        "plt.title(\"Type of Thyroid vs TT4\")\n",
        "plt.xlabel(\"Type of Thyroid\")\n",
        "plt.ylabel(\"TT4\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "uirXLZEDsGLC",
        "outputId": "917e2f42-a099-4663-9bec-2914ec394cb2"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data['TSH'] = pd.to_numeric(data['TSH'])\n",
        "\n",
        "plt.figure(figsize=(12,6))\n",
        "sns.boxplot(x = \"Class\", y = \"TSH\", data = data)\n",
        "plt.title(\"Type of Thyroid vs TSH\")\n",
        "plt.xlabel(\"Type of Thyroid\")\n",
        "plt.ylabel(\"TSH\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "yy8RKfxssJIL",
        "outputId": "f31a14cf-0c41-48a3-cc43-6ccdf1fed61e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data['T4U'] = pd.to_numeric(data['T4U'])\n",
        "\n",
        "plt.figure(figsize=(12,6))\n",
        "sns.boxplot(x = \"Class\", y = \"T4U\", data = data)\n",
        "plt.title(\"Type of Thyroid vs T4U\")\n",
        "plt.xlabel(\"Type of Thyroid\")\n",
        "plt.ylabel(\"T4U\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "-jTb2ch-sL2T",
        "outputId": "6af81589-23b4-41f9-efe2-1fe4b35f7f49"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data['FTI'] = pd.to_numeric(data['FTI'])\n",
        "\n",
        "plt.figure(figsize=(12,6))\n",
        "sns.boxplot(x = \"Class\", y = \"FTI\", data = data)\n",
        "plt.title(\"Type of Thyroid vs FTI\")\n",
        "plt.xlabel(\"Type of Thyroid\")\n",
        "plt.ylabel(\"FTI\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "AWSA9MnNsO_b",
        "outputId": "ce38c10e-9ec5-478b-eab5-6fdf1d7b5d09"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "execution_count": 113,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data[\"tumor\"].value_counts().plot(kind = \"bar\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 826
        },
        "id": "nmiiJ8PDsRRu",
        "outputId": "45b0a180-0e21-45c0-ae04-cdf85299c53d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "([0, 1, 2, 3],\n",
              " [Text(0, 0, 'negative'),\n",
              "  Text(1, 0, 'compensated_hypothyroid'),\n",
              "  Text(2, 0, 'primary_hypothyroid'),\n",
              "  Text(3, 0, 'secondary_hypothyroid')])"
            ]
          },
          "execution_count": 114,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "sns.histplot(binwidth=0.5, x=\"Class\", hue=\"tumor\", data=data, stat=\"count\", multiple=\"stack\")\n",
        "plt.xticks(rotation = \"vertical\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "id": "LIzaOSV9sWAb",
        "outputId": "5524d5c8-bffe-4c8f-bfe6-d16641eb8f29"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "execution_count": 115,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "data[\"goitre\"].value_counts().plot(kind = \"bar\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 826
        },
        "id": "lpJoTaDOsah9",
        "outputId": "6c14f399-287b-4c22-d9e5-d2f8b8bab952"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "([0, 1, 2, 3],\n",
              " [Text(0, 0, 'negative'),\n",
              "  Text(1, 0, 'compensated_hypothyroid'),\n",
              "  Text(2, 0, 'primary_hypothyroid'),\n",
              "  Text(3, 0, 'secondary_hypothyroid')])"
            ]
          },
          "execution_count": 116,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "sns.histplot(binwidth=0.5, x=\"Class\", hue=\"goitre\", data=data, stat=\"count\", multiple=\"stack\")\n",
        "plt.xticks(rotation = \"vertical\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sjqL4odsseu5",
        "outputId": "283d4975-8f21-4488-96c3-c13561407b62"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['age', 'sex', 'on_thyroxine', 'query_on_thyroxine',\n",
              "       'on_antithyroid_medication', 'sick', 'pregnant', 'thyroid_surgery',\n",
              "       'I131_treatment', 'query_hypothyroid', 'query_hyperthyroid', 'lithium',\n",
              "       'goitre', 'tumor', 'hypopituitary', 'psych', 'TSH_measured', 'TSH',\n",
              "       'T3_measured', 'T3', 'TT4_measured', 'TT4', 'T4U_measured', 'T4U',\n",
              "       'FTI_measured', 'FTI', 'TBG_measured', 'TBG', 'referral_source',\n",
              "       'Class'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 117,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.columns"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
